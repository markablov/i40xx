# INPUT:
#   rr0 - high digit of dividend
#   rr1 - low digit dividend
#   rr2 - divisor
# OUTPUT:
#   rr1 - reminder
#   rr4 - low digit of quotient
#   rr5 - high digit of quotient
div8x4:
  FIM r2, 0x00
  LDM 0x00
  XCH rr10
div8x4_loop:
  CLC
  LD rr1
  SUB rr2
  XCH rr1
  CMC
  LD rr0
  # acc = acc - borrow
  SUB rr10
  XCH rr0
  JCN nc, div8x4_return
  ISZ rr4, div8x4_loop
  ISZ rr5, div8x4_loop
div8x4_return:
  LD rr1
  ADD rr2
  XCH rr1
  CLC
  BBL 0

# INPUT:
#   rr13 - high digit of dividend
#   acc - low digit of dividend
#   rr10 - divisor
#   rr11 - 0x0
# OUTPUT:
#   rr13 - reminder
#   rr12 - quotient
# VARIABLES:
#   rr6 - low digit of dividend
# NOTES:
#   quotient supposed to be single digit, carry flag would be set if it's not
div8by4to4:
  XCH rr6
  CLB
  XCH rr12
div8by4to4_loop:
  LD rr6
  SUB rr10
  XCH rr6
  CMC
  LD rr13
  SUB rr11
  XCH rr13
  JCN nc, div8by4to4_compensate
  CLC
  ISZ rr12, div8by4to4_loop
  STC
  LD rr10
  XCH rr13                               # HACK! Because that routine is used by long division only, we can have some non-standard behaviour
                                         # Presume, that if overflow occurs, quotient is either 0x10 or 0x11 (this comes from Knuth's algorithm D)
                                         # Then we can return reminder === divisor for cases when we need to have double quotient correction (0x11)
  BBL 0
div8by4to4_compensate:
  LD rr6
  ADD rr10
  XCH rr13
  CLC
  BBL 0

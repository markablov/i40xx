%include "memory.i4040"
%include "mulMod_binary_fast.i4040"
%include "shiftMulti.i4040"

# INPUT:
#   rr0..rr3 - base
#   memMainVar[0x0A] - exponent
#   memMainVar[0x07] - divisor
# OUTPUT:
#   memStatusCharVar[0x07] - result
# VARIABLES:
#   memStatusCharVar[0x0D] - poweredBase = (base ^ step) % mod
powerMod:
  LDM 0x0D
  JMS storeVarToStatusCharMemory     # poweredBase = base
  LDM 0x07
  JMS clearVarFromStatusCharMemory
  FIM r0, 0x70
  SRC r0
  LDM 0x01
  WR0                                # res = 1
powerMod_loop:
  FIM r0, 0xA0
  SRC r0
  RDM
  FIM r3, 0x10
  AN6
  JCN z, powerMod_skipResultUpdate  # if (exp & 1 === 0)
  FIM r7, 0xD7
  JMS mulMod                         # res = (res * poweredBase) % m
powerMod_skipResultUpdate:
  FIM r7, 0xDD
  JMS mulMod                         # poweredBase = (poweredBase * poweredBase) % m
  LDM 0x0A
  JMS MSWForVarFromMainMemory
  JCN c, powerMod_ret
  LD rr1
  XCH rr6
  FIM r0, 0xA0
  FIM r1, 0x10
  FIM r2, 0x38
  JMS shiftRightVarFromMainMemory   # exp = exp / 2
  LD rr12
  ADD rr1
  JCN c, powerMod_loop              # (exp.length - 1 + exp[0] === 0) => (exp.length === 1 && exp[0] === 0) => (exp === 0)
  JCN nz, powerMod_loop
powerMod_ret:
  CLC
  BBL 0

# INPUT:
#   STATUS_MEM_VARIABLE_CURRENT_PRIME - base
#   rr6 - exponent
# OUTPUT:
#   STATUS_MEM_VARIABLE_F_COMPUTATION_FK
# VARIABLES:
#   STATUS_MEM_VARIABLE_MOD_POWER_BASE - poweredBase
modularPowerForCurrentPrimeByExp:
  LDM $STATUS_MEM_VARIABLE_F_COMPUTATION_FK
  JMS clearVarFromStatusCharMemory
  LDM 0x1
  WR0                                                  # res = 1

  LD rr6
  JCN z, modularPowerForCurrentPrimeByExp_return       # if (exp === 0)

  LDM $STATUS_MEM_VARIABLE_CURRENT_PRIME
  JMS loadVarFromStatusCharMemory
  LDM $STATUS_MEM_VARIABLE_MOD_POWER_BASE
  JMS storeVarToStatusCharMemory                       # poweredBase = currentPrime

  LD rr6
  WRM                                                  # exponent = rr6

  LDM 0x1
  AN6
  JCN z, modularPowerForCurrentPrimeByExp_skipBit0     # if ((exp >> 0) & 0x1)

  LDM $STATUS_MEM_VARIABLE_MOD_POWER_BASE
  XCH rr14
  LDM $STATUS_MEM_VARIABLE_F_COMPUTATION_FK
  XCH rr15
  JMS mulMod                                           # res = (res * poweredBase) % m

modularPowerForCurrentPrimeByExp_skipBit0:
  LDM $STATUS_MEM_VARIABLE_MOD_POWER_BASE
  XCH rr14
  LDM $STATUS_MEM_VARIABLE_MOD_POWER_BASE
  XCH rr15
  JMS mulMod                                           # poweredBase = (poweredBase * poweredBase) % m

  RDM
  XCH rr6
  LDM 0x2
  AN6
  JCN z, modularPowerForCurrentPrimeByExp_skipBit1     # if ((exp >> 1) & 0x1)

  LDM $STATUS_MEM_VARIABLE_MOD_POWER_BASE
  XCH rr14
  LDM $STATUS_MEM_VARIABLE_F_COMPUTATION_FK
  XCH rr15
  JMS mulMod                                           # res = (res * poweredBase) % m

modularPowerForCurrentPrimeByExp_skipBit1:
  LDM $STATUS_MEM_VARIABLE_MOD_POWER_BASE
  XCH rr14
  LDM $STATUS_MEM_VARIABLE_MOD_POWER_BASE
  XCH rr15
  JMS mulMod                                           # poweredBase = (poweredBase * poweredBase) % m

  RDM
  XCH rr6
  LDM 0x4
  AN6
  JCN z, modularPowerForCurrentPrimeByExp_skipBit2     # if ((exp >> 2) & 0x1)

  LDM $STATUS_MEM_VARIABLE_MOD_POWER_BASE
  XCH rr14
  LDM $STATUS_MEM_VARIABLE_F_COMPUTATION_FK
  XCH rr15
  JMS mulMod                                           # res = (res * poweredBase) % m

modularPowerForCurrentPrimeByExp_skipBit2:
  LDM $STATUS_MEM_VARIABLE_MOD_POWER_BASE
  XCH rr14
  LDM $STATUS_MEM_VARIABLE_MOD_POWER_BASE
  XCH rr15
  JMS mulMod                                           # poweredBase = (poweredBase * poweredBase) % m

  RDM
  XCH rr6
  LDM 0x8
  AN6
  JCN z, modularPowerForCurrentPrimeByExp_skipBit3     # if ((exp >> 3) & 0x1)

  LDM $STATUS_MEM_VARIABLE_MOD_POWER_BASE
  XCH rr14
  LDM $STATUS_MEM_VARIABLE_F_COMPUTATION_FK
  XCH rr15
  JMS mulMod                                           # res = (res * poweredBase) % m

modularPowerForCurrentPrimeByExp_skipBit3:
modularPowerForCurrentPrimeByExp_return:
  BBL 0

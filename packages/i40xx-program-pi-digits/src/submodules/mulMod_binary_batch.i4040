%include "memory.i4040"

# INPUT:
#   [rr0, rr1, rr4, rr2] - first factor
#   rr6 - 0x8
#   rr7 - 0x4
#   rr12 - variable number for second term
#   rr13 - 0x0
#   memStatusCharVar[rr12] - second factor (b)
# OUTPUT:
#   [rr0, rr1, rr4, rr2] - result
# VARIABLES:
#   [rr12, rr5, rr14, rr15] - shiftedFactor
#   [rr10, rr11, rr9, rr8] - temporal result
#   [rr0, rr1, rr4, rr2] - multipliedFactor
# NOTES:
#   - keeps rr13, rr6, rr7 unmodified
#   - clears carry flag

mulMod:
  SRC r6
  RD3
  XCH rr15
  RD0
  XCH rr12
  RD1
  XCH rr5
  RD2
  XCH rr14                               # rr12 = b[0], rr5 = b[1], rr14 = b[2], rr15 = b[3]

mulMod_shiftedFactorLoaded:
  CLB
  DCL
  XCH rr3

  FIM r4, 0x00
  FIM r5, 0x00                           # res = 0

  LD rr15
  JCN nz, mulMod_factor4
  LD rr14
  JCN nz, mulMod_factor3
  LD rr5
  JCN nz, mulMod_factor2
  JUN mulMod_processSingleNibble

mulMod_factor4:
  JMS mulMod_processNibble_first
  LD rr5
  JMS mulMod_processNibble
  XCH rr14
  JMS mulMod_processNibble
  LD rr15
  JUN mulMod_processLastNibble

mulMod_factor3:
  JMS mulMod_processNibble_first
  LD rr5
  JMS mulMod_processNibble
  XCH rr14
  JUN mulMod_processLastNibble

mulMod_factor2:
  JMS mulMod_processNibble_first
  LD rr5
  JUN mulMod_processLastNibble

__location(0x2:0x00)
mulMod_processNibble_0:                   # 0b0000
  JUN mulMod_updateMultipliedFactor16

__location(0x2:0x8)
mulMod_processNibble:
  XCH rr12

__location(0x2:0x9)
mulMod_processNibble_first:
  JIN r6

__location(0x2:0x10)
mulMod_processNibble_1:                   # 0b0001
  JMS mulMod_updateResult
  JUN mulMod_updateMultipliedFactor16

__location(0x2:0x20)
mulMod_processNibble_2:                   # 0b0010
  JMS mulMod_updateMultipliedFactor
  JMS mulMod_updateResult
  JUN mulMod_updateMultipliedFactor8

__location(0x2:0x30)
mulMod_processNibble_3:                   # 0b0011
  JMS mulMod_updateResultAndFactor
  JMS mulMod_updateResult
  JUN mulMod_updateMultipliedFactor8

__location(0x2:0x40)
mulMod_processNibble_4:                   # 0b0100
  JMS mulMod_updateMultipliedFactor
  JMS mulMod_updateMultipliedFactor
  JMS mulMod_updateResultAndFactor
  JUN mulMod_updateMultipliedFactor

__location(0x2:0x50)
mulMod_processNibble_5:                   # 0b0101
  JMS mulMod_updateResult
  JMS mulMod_updateMultipliedFactor
  JMS mulMod_updateMultipliedFactor
  JMS mulMod_updateResultAndFactor
  JUN mulMod_updateMultipliedFactor

__location(0x2:0x60)
mulMod_processNibble_6:                   # 0b0110
  JMS mulMod_updateMultipliedFactor
  JMS mulMod_updateResultAndFactor
  JMS mulMod_updateResultAndFactor
  JUN mulMod_updateMultipliedFactor

__location(0x2:0x70)
mulMod_processNibble_7:                   # 0b0111
  JMS mulMod_updateResultAndFactor
  JMS mulMod_updateResultAndFactor
  JMS mulMod_updateResultAndFactor
  JUN mulMod_updateMultipliedFactor

__location(0x2:0x80)
mulMod_processNibble_8:                   # 0b1000
  JMS mulMod_updateMultipliedFactor8
  JUN mulMod_updateResultAndFactor

__location(0x2:0x90)
mulMod_processNibble_9:                   # 0b1001
  JMS mulMod_updateResult
  JMS mulMod_updateMultipliedFactor8
  JUN mulMod_updateResultAndFactor

__location(0x2:0xA0)
mulMod_processNibble_A:                   # 0b1010
  JMS mulMod_updateMultipliedFactor
  JMS mulMod_updateResultAndFactor
  JMS mulMod_updateMultipliedFactor
  JUN mulMod_updateResultAndFactor

__location(0x2:0xB0)
mulMod_processNibble_B:                   # 0b1011
  JMS mulMod_updateResultAndFactor
  JMS mulMod_updateResultAndFactor
  JMS mulMod_updateMultipliedFactor
  JUN mulMod_updateResultAndFactor

__location(0x2:0xC0)
mulMod_processNibble_C:                   # 0b1100
  JMS mulMod_updateMultipliedFactor
  JMS mulMod_updateMultipliedFactor
  JMS mulMod_updateResultAndFactor
  JUN mulMod_updateResultAndFactor

__location(0x2:0xD0)
mulMod_processNibble_D:                   # 0b1101
  JMS mulMod_updateResultAndFactor
  JMS mulMod_updateMultipliedFactor
  JMS mulMod_updateResultAndFactor
  JUN mulMod_updateResultAndFactor

__location(0x2:0xE0)
mulMod_processNibble_E:                   # 0b1110
  JMS mulMod_updateMultipliedFactor
  JMS mulMod_updateResultAndFactor
  JMS mulMod_updateResultAndFactor
  JUN mulMod_updateResultAndFactor

__location(0x2:0xF0)
mulMod_processNibble_F:                   # 0b1111
  JMS mulMod_updateResultAndFactor
  JMS mulMod_updateResultAndFactor
  JMS mulMod_updateResultAndFactor
  JUN mulMod_updateResultAndFactor

__location(0x3:0x00)
mulMod_processLastNibble_0:                   # 0b0000
  FIM r0, 0x00
  FIM r1, 0x00
  BBL $BANK_WITH_VARIABLES

__location(0x3:0x8)
mulMod_processLastNibble:
  XCH rr12

__location(0x3:0x9)
mulMod_processSingleNibble:
  JIN r6

__location(0x3:0x10)
mulMod_processLastNibble_1:                   # 0b0001
  JUN mulMod_updateResultLast

__location(0x3:0x20)
mulMod_processLastNibble_2:                   # 0b0010
  JMS mulMod_updateMultipliedFactor
  JUN mulMod_updateResultLast

__location(0x3:0x30)
mulMod_processLastNibble_3:                   # 0b0011
  JMS mulMod_updateResultAndFactor
  JUN mulMod_updateResultLast

__location(0x3:0x40)
mulMod_processLastNibble_4:                   # 0b0100
  JMS mulMod_updateMultipliedFactor
  JMS mulMod_updateMultipliedFactor
  JUN mulMod_updateResultLast

__location(0x3:0x50)
mulMod_processLastNibble_5:                   # 0b0101
  JMS mulMod_updateResultAndFactor
  JMS mulMod_updateMultipliedFactor
  JUN mulMod_updateResultLast

__location(0x3:0x60)
mulMod_processLastNibble_6:                   # 0b0110
  JMS mulMod_updateMultipliedFactor
  JMS mulMod_updateResultAndFactor
  JUN mulMod_updateResultLast

__location(0x3:0x70)
mulMod_processLastNibble_7:                   # 0b0111
  JMS mulMod_updateResultAndFactor
  JMS mulMod_updateResultAndFactor
  JUN mulMod_updateResultLast

__location(0x3:0x80)
mulMod_processLastNibble_8:                   # 0b1000
  JMS mulMod_updateMultipliedFactor8
  JUN mulMod_updateResultLast

__location(0x3:0x90)
mulMod_processLastNibble_9:                   # 0b1001
  JMS mulMod_updateResult
  JMS mulMod_updateMultipliedFactor8
  JUN mulMod_updateResultLast

__location(0x3:0xA0)
mulMod_processLastNibble_A:                   # 0b1010
  JMS mulMod_updateMultipliedFactor
  JMS mulMod_updateResultAndFactor
  JMS mulMod_updateMultipliedFactor
  JUN mulMod_updateResultLast

__location(0x3:0xB0)
mulMod_processLastNibble_B:                   # 0b1011
  JMS mulMod_updateResultAndFactor
  JMS mulMod_updateResultAndFactor
  JMS mulMod_updateMultipliedFactor
  JUN mulMod_updateResultLast

__location(0x3:0xC0)
mulMod_processLastNibble_C:                   # 0b1100
  JMS mulMod_updateMultipliedFactor
  JMS mulMod_updateMultipliedFactor
  JMS mulMod_updateResultAndFactor
  JUN mulMod_updateResultLast

__location(0x3:0xD0)
mulMod_processLastNibble_D:                   # 0b1101
  JMS mulMod_updateResultAndFactor
  JMS mulMod_updateMultipliedFactor
  JMS mulMod_updateResultAndFactor
  JUN mulMod_updateResultLast

__location(0x3:0xE0)
mulMod_processLastNibble_E:                   # 0b1110
  JMS mulMod_updateMultipliedFactor
  JMS mulMod_updateResultAndFactor
  JMS mulMod_updateResultAndFactor
  JUN mulMod_updateResultLast

__location(0x3:0xF0)
mulMod_processLastNibble_F:                   # 0b1111
  JMS mulMod_updateResultAndFactor
  JMS mulMod_updateResultAndFactor
  JMS mulMod_updateResultAndFactor
  JUN mulMod_updateResultLast

# INPUT:
#   [rr0, rr1, rr4, rr2] - multipliedFactor
#   [rr10, rr11, rr9, rr8] - temporal result
# OUTPUT:
#   [rr10, rr11, rr9, rr8] - temporal result
#   [rr0, rr1, rr4, rr2] - multipliedFactor
mulMod_updateResultAndFactor:
  LD rr10
  ADD rr0
  XCH rr10
  LD rr11
  ADD rr1
  XCH rr11
  LD rr9
  ADD rr4
  XCH rr9
  LD rr8
  ADD rr2                                           # res = res + multipliedFactor
  XCH rr8
  LD rr8
  AN6
  JCN z, mulMod_updateResultAndFactor_updateFactor  # if (res[3] < 0x8)

  SRC r4
  RD0
  ADD rr10
  XCH rr10
  RD1
  ADD rr11
  XCH rr11
  RD2
  ADD rr9
  XCH rr9
  RD3
  ADD rr8
  XCH rr8                                           # res = res - m * floor((res[3] * 0x1000) / m)
  CLC

mulMod_updateResultAndFactor_updateFactor:
  LD rr0
  ADD rr0
  XCH rr0
  LD rr1
  ADD rr1
  XCH rr1
  LD rr4
  ADD rr4
  XCH rr4
  LD rr2
  ADD rr2
  XCH rr2                                           # multipliedFactor = multipliedFactor + multipliedFactor
  AN7                                               # check if previous value of multipliedFactor[3] < 4, then new multipliedFactor[3] < 8
  JCN z, mulMod_updateResultAndFactor_return        # if (multipliedFactor[3] < 0x8)

  SRC r1
  RD0
  ADD rr0
  XCH rr0
  RD1
  ADD rr1
  XCH rr1
  RD2
  ADD rr4
  XCH rr4
  RD3
  ADD rr2
  XCH rr2                                           # multipliedFactor = multipliedFactor - m * floor((multipliedFactor[3] * 0x1000) / m)
  CLC
mulMod_updateResultAndFactor_return:
  BBL 0

# INPUT:
#   [rr0, rr1, rr4, rr2] - multipliedFactor
# OUTPUT:
#   [rr0, rr1, rr4, rr2] - multipliedFactor
# NOTES:
#   block size is 13 bytes
__location(0x4:0x01)
mulMod_updateMultipliedFactor:
  LD rr0
  ADD rr0
  XCH rr0
  LD rr1
  ADD rr1
  XCH rr1
  LD rr4
  ADD rr4
  XCH rr4
  LD rr2
  ADD rr2
  XCH rr2                                           # multipliedFactor = multipliedFactor + multipliedFactor
  JIN r1                                            # jump table, based on multipliedFactor[3], to check when multipliedFactor[3] >= 8
                                                    # JIN takes 1 cycles, while AN7/JCN takes 3 cycles, so we save 2 cycles on every call!
__location(0x4:0x00)
mulMod_updateMultipliedFactor_factor0:
  BBL 0

__location(0x4:0x10)
mulMod_updateMultipliedFactor_factor1:
  BBL 0

__location(0x4:0x20)
mulMod_updateMultipliedFactor_factor2:
  BBL 0

__location(0x4:0x30)
mulMod_updateMultipliedFactor_factor3:
  BBL 0

__location(0x4:0x40)
mulMod_updateMultipliedFactor_factor4:
  BBL 0

__location(0x4:0x50)
mulMod_updateMultipliedFactor_factor5:
  BBL 0

__location(0x4:0x60)
mulMod_updateMultipliedFactor_factor6:
  BBL 0

__location(0x4:0x70)
mulMod_updateMultipliedFactor_factor7:
  BBL 0

__location(0x4:0x80)
mulMod_updateMultipliedFactor_factor8:
  SRC r1
  RD0
  ADD rr0
  XCH rr0
  RD1
  ADD rr1
  XCH rr1
  RD2
  ADD rr4
  XCH rr4
  RD3
  ADD rr2
  XCH rr2                                           # multipliedFactor = multipliedFactor - m * floor((multipliedFactor[3] * 0x1000) / m)
  CLC
  BBL 0


__location(0x4:0x90)
mulMod_updateMultipliedFactor_factor9:
  SRC r1
  RD0
  ADD rr0
  XCH rr0
  RD1
  ADD rr1
  XCH rr1
  RD2
  ADD rr4
  XCH rr4
  RD3
  ADD rr2
  XCH rr2                                           # multipliedFactor = multipliedFactor - m * floor((multipliedFactor[3] * 0x1000) / m)
  CLC
  BBL 0


__location(0x4:0xA0)
mulMod_updateMultipliedFactor_factorA:
  SRC r1
  RD0
  ADD rr0
  XCH rr0
  RD1
  ADD rr1
  XCH rr1
  RD2
  ADD rr4
  XCH rr4
  RD3
  ADD rr2
  XCH rr2                                           # multipliedFactor = multipliedFactor - m * floor((multipliedFactor[3] * 0x1000) / m)
  CLC
  BBL 0


__location(0x4:0xB0)
mulMod_updateMultipliedFactor_factorB:
  SRC r1
  RD0
  ADD rr0
  XCH rr0
  RD1
  ADD rr1
  XCH rr1
  RD2
  ADD rr4
  XCH rr4
  RD3
  ADD rr2
  XCH rr2                                           # multipliedFactor = multipliedFactor - m * floor((multipliedFactor[3] * 0x1000) / m)
  CLC
  BBL 0


__location(0x4:0xC0)
mulMod_updateMultipliedFactor_factorC:
  SRC r1
  RD0
  ADD rr0
  XCH rr0
  RD1
  ADD rr1
  XCH rr1
  RD2
  ADD rr4
  XCH rr4
  RD3
  ADD rr2
  XCH rr2                                           # multipliedFactor = multipliedFactor - m * floor((multipliedFactor[3] * 0x1000) / m)
  CLC
  BBL 0


__location(0x4:0xD0)
mulMod_updateMultipliedFactor_factorD:
  SRC r1
  RD0
  ADD rr0
  XCH rr0
  RD1
  ADD rr1
  XCH rr1
  RD2
  ADD rr4
  XCH rr4
  RD3
  ADD rr2
  XCH rr2                                           # multipliedFactor = multipliedFactor - m * floor((multipliedFactor[3] * 0x1000) / m)
  CLC
  BBL 0


__location(0x4:0xE0)
mulMod_updateMultipliedFactor_factorE:
  SRC r1
  RD0
  ADD rr0
  XCH rr0
  RD1
  ADD rr1
  XCH rr1
  RD2
  ADD rr4
  XCH rr4
  RD3
  ADD rr2
  XCH rr2                                           # multipliedFactor = multipliedFactor - m * floor((multipliedFactor[3] * 0x1000) / m)
  CLC
  BBL 0


__location(0x4:0xF0)
mulMod_updateMultipliedFactor_factorF:
  SRC r1
  RD0
  ADD rr0
  XCH rr0
  RD1
  ADD rr1
  XCH rr1
  RD2
  ADD rr4
  XCH rr4
  RD3
  ADD rr2
  XCH rr2                                           # multipliedFactor = multipliedFactor - m * floor((multipliedFactor[3] * 0x1000) / m)
  CLC
  BBL 0

# multipliedFactor = multipliedFactor * 16
mulMod_updateMultipliedFactor16:
  LD rr2
  JCN z, mulMod_updateMultipliedFactor16_shift
  JMS mulMod_updateMultipliedFactor
  JMS mulMod_updateMultipliedFactor
  JMS mulMod_updateMultipliedFactor
  JUN mulMod_updateMultipliedFactor

mulMod_updateMultipliedFactor16_shift:
  XCH rr0
  XCH rr1
  XCH rr4
  XCH rr2
  LD rr2
  RAL
  JCN nc, mulMod_updateMultipliedFactor16_ret

  CLC
  SRC r1
  RD0
  ADD rr0
  XCH rr0
  RD1
  ADD rr1
  XCH rr1
  RD2
  ADD rr4
  XCH rr4
  RD3
  ADD rr2
  XCH rr2                                           # multipliedFactor = multipliedFactor - m * floor((multipliedFactor[3] * 0x1000) / m)
  CLC
mulMod_updateMultipliedFactor16_ret:
  BBL 0

# multipliedFactor = multipliedFactor * 8
mulMod_updateMultipliedFactor8:
  LD rr2
  JCN z, mulMod_updateMultipliedFactor8_shift12
  RAR
  JCN z, mulMod_updateMultipliedFactor8_shift16
  CLC
  JMS mulMod_updateMultipliedFactor
  JMS mulMod_updateMultipliedFactor
  JUN mulMod_updateMultipliedFactor

mulMod_updateMultipliedFactor8_shift12:
  LD rr4
  RAR
  XCH rr2
  LD rr1
  RAR
  XCH rr4
  LD rr0
  RAR
  XCH rr1
  LDM 0x0
  RAR
  XCH rr0                                           # multipliedFactor = multipliedFactor * 8
  BBL 0

mulMod_updateMultipliedFactor8_shift16:
  LD rr4
  RAR
  XCH rr2
  LD rr1
  RAR
  XCH rr4
  LD rr0
  RAR
  XCH rr1
  LDM 0x0
  RAR
  XCH rr0                                           # multipliedFactor = multipliedFactor * 8

  SRC r1
  RD0
  ADD rr0
  XCH rr0
  RD1
  ADD rr1
  XCH rr1
  RD2
  ADD rr4
  XCH rr4
  RD3
  ADD rr2
  XCH rr2                                           # multipliedFactor = multipliedFactor - m * floor((multipliedFactor[3] * 0x1000) / m)
  CLC
  BBL 0

# INPUT:
#   [rr0, rr1, rr4, rr2] - multipliedFactor
#   [rr10, rr11, rr9, rr8] - temporal result
# OUTPUT:
#   [rr10, rr11, rr9, rr8] - temporal result
mulMod_updateResult:
  LD rr10
  ADD rr0
  XCH rr10
  LD rr11
  ADD rr1
  XCH rr11
  LD rr9
  ADD rr4
  XCH rr9
  LD rr8
  ADD rr2                                           # res = res + multipliedFactor
  XCH rr8
  LD rr8
  AN6
  JCN z, mulMod_updateResult_return                 # if (res[3] < 0x8)

  SRC r4
  RD0
  ADD rr10
  XCH rr10
  RD1
  ADD rr11
  XCH rr11
  RD2
  ADD rr9
  XCH rr9
  RD3
  ADD rr8
  XCH rr8                                           # res = res - m * floor((res[3] * 0x1000) / m)
  CLC

mulMod_updateResult_return:
  BBL 0

# INPUT:
#   [rr0, rr1, rr4, rr2] - multipliedFactor
#   [rr10, rr11, rr9, rr8] - temporal result
# OUTPUT:
#   [rr0, rr1, rr4, rr2] - result
mulMod_updateResultLast:
  LD rr10
  ADD rr0
  XCH rr0
  LD rr11
  ADD rr1
  XCH rr1
  LD rr9
  ADD rr4
  XCH rr4
  LD rr8
  ADD rr2                                                                      # res = res + multipliedFactor
  JCN z, mulMod_updateResultLast_returnRes_withHighWordInAccumulator           # if (res[3] === 0)
  XCH rr2

  SRC r1
  RD0
  ADD rr0
  XCH rr0
  RD1
  ADD rr1
  XCH rr1
  RD2
  ADD rr4
  XCH rr4
  RD3
  ADD rr2                                                                      # res = res - m * floor((res[3] * 0x1000) / m)
  CLC
  JCN z, mulMod_updateResultLast_returnRes_withHighWordInAccumulator           # if (res[3] === 0)

  XCH rr2
  SRC r7
  RD0
  JCN z, mulMod_updateResultLast_returnRes                                     # if (m > 0x1000)

  RD1
  ADD rr0
  XCH rr0
  RD2
  ADD rr1
  XCH rr1
  RD3
  ADD rr4                                                                     # res = res - m * (floor(0xF00 / m) || 1)
  XCH rr4
  CLB
  XCH rr2
  BBL $BANK_WITH_VARIABLES

mulMod_updateResultLast_returnRes_withHighWordInAccumulator:
  XCH rr2
mulMod_updateResultLast_returnRes:
  BBL $BANK_WITH_VARIABLES

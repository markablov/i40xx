%include "memory.i4040"
%include "mulMod_binary_batch.i4040"

# INPUT:
#   rr6 - 0x8
#   rr7 - 0x4
#   rr6' - 0x8
#   rr7' - 0x4
#   rr13 - 0x0
#   STATUS_MEM_VARIABLE_STARTING_PI_DIGITS_POSITION
# OUTPUT:
#   [rr0, rr1, rr4, rr2] - result
# VARIABLES:
#   STATUS_MEM_VARIABLE_POWER_10_EXPONENT
#   [rr0, rr1, rr4, rr2] - result
#   [rr0', rr1', rr4', rr2'] - powerBase
power10:
  FIM r5, $STATUS_MEM_VARIABLE_STARTING_PI_DIGITS_POSITION . 0
  SRC r5
  RD0
  XCH rr8
  RD1
  XCH rr9
  RD2
  XCH rr14
  RD3
  XCH rr15
  LD rr8
  ADD rr9
  ADD rr14
  ADD rr15
  JCN c, power10_nonZero
  JCN nz, power10_nonZero                                            # if (startingPiDigitsPosition !== 0)

  XCH rr2
  CLB
  XCH rr4
  FIM r0, 0x10
  BBL 0                                                              # return 1

power10_nonZero:
  FIM r0, 0x10
  CLB
  XCH rr2
  CLB
  XCH rr4                                                            # res = 1

  SB1
  FIM r0, 0xA0
  CLB
  XCH rr2
  CLB
  XCH rr4                                                            # powerBase = 10

  INC rr10
  SRC r5
  LD rr8
  WR0
  LD rr9
  WR1
  LD rr14
  WR2
  LD rr15
  WR3                                                                # exp = startingPiDigitsPosition

power10_loop:
  RD3
  RAR
  WR3
  RD2
  RAR
  WR2
  RD1
  RAR
  WR1
  RD0
  RAR
  WR0                                                                # exp = exp >> 1

  JCN nc, power10_updatePowerBase                                    # if (previousExp & 1 !== 1)

  LD rr0
  XCH rr12
  LD rr4
  XCH rr14
  LD rr2
  XCH rr15
  LD rr1
  SB0
  XCH rr5
  JMS mulMod_shiftedFactorLoaded                                     # res = (res * powerBase) % m
  DCL
  SB1

  RD0
  JCN nz, power10_updatePowerBase
  RD1
  JCN nz, power10_updatePowerBase
  RD2
  JCN nz, power10_updatePowerBase
  RD3
  JCN z, power10_return                                              # if (exp === 0)

power10_updatePowerBase:
  LD rr0
  XCH rr12
  LD rr1
  XCH rr5
  LD rr4
  XCH rr14
  LD rr2
  XCH rr15
  JMS mulMod_shiftedFactorLoaded                                     # powerBase = (powerBase * powerBase) % m
  DCL

  JUN power10_loop

power10_return:
  SB0
  BBL 0

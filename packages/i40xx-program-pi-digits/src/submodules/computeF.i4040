%include "memory.i4040"
%include "mulMulti.i4040"
%include "divMulti.i4040"
%include "mulMod.i4040"
%include "powerMod.i4040"
%include "addMod.i4040"

computeMaxVAndM:
  CLB
  XCH rr7
  LDM 0x09
  JMS loadVarFromMainMemory
  LDM 0x08
  # tmp = a
  JMS storeVarToMainMemory
computeMaxVAndM_loop:
  INC rr7
  LDM 0x08
  JMS loadVarFromMainMemory
  LDM 0x07
  JMS storeVarToMainMemory
  LDM 0x09
  XCH rr2
  LDM 0x07
  XCH rr4
  # tmp = tmp * a
  JMS mulMWxMW
  FIM r0, 0xB8
  # if 2 * N > tmp
  JMS compareVarsFromMainMemory
  JCN c, computeMaxVAndM_loop
  FIM r0, 0x60
  SRC r0
  LD rr7
  WR2
  BBL 0

# INPUT:
#   memMainVar[0x07] - m
#   memMainVar[0x09] - a
#   memStatusCharVar[0x0F] - b
#   memStatusCharVar[0x06] - v
# OUTPUT:
#   memStatusCharVar[0x0F] - b
#   memStatusCharVar[0x06] - v
# VARIABLES:
#   memStatusCharVar[0x07] - bCoef
updateB:
  LDM 0x06
  JMS loadVarFromMainMemory
  LDM 0x07
  JMS storeVarToStatusCharMemory     # bCoef = k
updateB_loop:
  LDM 0x08
  JMS storeVarToMainMemory           # we know that rr0..rr3 contains bCoef
  JMS divMWxMW
  LDM 0x08
  JMS loadVarFromMainMemory
  LD rr0
  ADD rr1
  ADD rr2
  ADD rr3
  JCN c, updateB_return
  JCN nz, updateB_return             # if bCoef % a !== 0
  LDM 0x0A
  JMS loadVarFromMainMemory
  LDM 0x07
  JMS storeVarToStatusCharMemory     # bCoef = bCoef / a
  FIM r3, 0x60
  SRC r3
  RD3
  DAC
  WR3                                # v--
  JUN updateB_loop
updateB_return:
  FIM r7, 0x7F
  JMS mulMod                         # b = (b * bCoef) % m
  BBL 0

# INPUT:
#   memMainVar[0x06] - k
#   memMainVar[0x07] - m
#   memMainVar[0x09] - a
#   memStatusCharVar[0x0A] - A
#   memStatusCharVar[0x06] - v
# OUTPUT:
#   memStatusCharVar[0x0A] - A
#   memStatusCharVar[0x06] - v
# VARIABLES:
#   memStatusCharVar[0x07] - ACoef
updateA:
  LDM 0x06
  JMS loadVarFromMainMemory
  LDM 0x08
  JMS storeVarToMainMemory               # tmp = k
  FIM r0, 0x83
  FIM r1, 0x13
  JMS shiftLeftVarFromMainMemory         # tmp = 2 * k
  FIM r0, 0x80
  FIM r1, 0xC0
  STC
updateA_ACoef_decrement_loop:
  SRC r0
  RDM
  SUB rr3
  CMC
  WRM
  INC rr1
  ISZ rr2, updateA_ACoef_decrement_loop  # tmp = 2 * k - 1
  LDM 0x08
  JMS loadVarFromMainMemory
  LDM 0x07
  JMS storeVarToStatusCharMemory         # ACoef = tmp
updateA_loop:
  LDM 0x08
  JMS storeVarToMainMemory               # we know that rr0..rr3 contains ACoef
  JMS divMWxMW
  LDM 0x08
  JMS loadVarFromMainMemory
  LD rr0
  ADD rr1
  ADD rr2
  ADD rr3
  JCN c, updateA_return
  JCN nz, updateA_return                 # ACoef % a !== 0
  LDM 0x0A
  JMS loadVarFromMainMemory
  LDM 0x07
  JMS storeVarToStatusCharMemory         # ACoef = ACoef / a
  FIM r3, 0x60
  SRC r3
  RD3
  IAC
  WR3                                    # v++
  JUN updateA_loop
updateA_return:
  FIM r7, 0x7A
  JMS mulMod                             # A = (A * ACoef) % m
  BBL 0

# INPUT:
#   memStatusCharVar[0x06] - v, vmax
#   memStatusCharVar[0x0A] - A
#   memStatusCharVar[0x0F] - b
#   memMainVar[0x06] - k
#   memMainVar[0x07] - divisor
#   memMainVar[0x09] - current prime number
# OUTPUT:
# VARIABLES:
#   memStatusCharVar[0x07] - fk / A ^ (-1)
#   rr4'..rr7' - tmp
updateF:
  FIM r0, 0x60
  SRC r0
  RD3
  JCN z, updateF_ret                 # if (v === 0)
  XCH rr0
  RD2
  SUB rr0
  CLC
  XCH rr0
  FIM r1, 0x00
  LDM 0x0A
  JMS storeVarToMainMemory
  LDM 0x09
  JMS loadVarFromMainMemory
  JMS powerMod                       # fk = (a ^ (vmax - v)) mod m
  FIM r7, 0xF7
  JMS mulMod                         # fk = (fk * b) mod m
  LDM 0x06
  JMS loadVarFromMainMemory
  LDM 0x0D
  JMS storeVarToStatusCharMemory
  FIM r7, 0xD7
  JMS mulMod                         # fk = (fk * k) mod m
  SB1
  FIM r0, 0x70
  SRC r0
  RD0
  XCH rr4
  RD1
  XCH rr5
  RD2
  XCH rr6
  RD3
  XCH rr7                            # tmp = fk
  SB0
  JMS computeInvertedA
  SB1
  FIM r0, 0xD0
  SRC r0
  LD rr4
  WR0
  LD rr5
  WR1
  LD rr6
  WR2
  LD rr7
  WR3                                # fk = tmp
  SB0
  FIM r7, 0xD7
  JMS mulMod                         # fk = (fk * A ^ (-1)) mod m
  FIM r0, 0x70
  SRC r0
  RD0
  XCH rr8
  RD1
  XCH rr9
  RD2
  XCH rr10
  RD3
  XCH rr11
  LDM 0x0B
  JMS loadVarFromStatusCharMemory
  JMS addMod
  LDM 0x0B
  JMS storeVarToStatusCharMemory     # f = (f + fk) mod m
updateF_ret:
  BBL 0

# INPUT:
#   memStatusCharVar[0x06] - vmax
#   memStatusCharVar[0x0A] - A
#   memMainVar[0x07] - divisor
#   memMainVar[0x09] - current prime number
# OUTPUT:
#   memStatusCharVar[0x07] - A ^ (-1)
# VARIABLES:
#   memStatusCharVar[0x07] - tmp
computeInvertedA:
  FIM r0, 0x60
  SRC r0
  RD2
  DAC
  CLC
  XCH rr0
  FIM r1, 0x00
  LDM 0x0A
  JMS storeVarToMainMemory
  LDM 0x09
  JMS loadVarFromMainMemory
  JMS powerMod                       # tmp = a ^ (vmax - 1)
  FIM r2, 0x70
  SRC r2
  RD0
  XCH rr0
  INC rr0
  RDM
  SUB rr0
  CMC
  XCH rr0
  JCN c, computeInvertedA_carryOnFirstDigitForExponent
  RD0
  IAC                                # if first digit of a ^ (vmax - 1) is 0xF, then we are subtracting 0x10 and need to set carry
computeInvertedA_carryOnFirstDigitForExponent:
  INC rr5
  SRC r2
  RD1
  XCH rr1
  RDM
  SUB rr1
  CMC
  XCH rr1
  INC rr5
  SRC r2
  RD2
  XCH rr2
  RDM
  SUB rr2
  CMC
  XCH rr2
  INC rr5
  SRC r2
  RD3
  XCH rr3
  RDM
  SUB rr3
  CMC
  XCH rr3
  LDM 0x0A
  JMS storeVarToMainMemory           # tmp = m - a ^ (vmax - 1) - 1
  LDM 0x0A
  JMS loadVarFromStatusCharMemory
  JMS powerMod                       # A^(-1) = (A ^ tmp) mod m
  BBL 0

# VARIABLES:
#   memMainVar[0x06] - k, loop iterator for F computation
computeF:
  FIM r0, 0x00
  FIM r1, 0x00
  LDM 0x0B
  # f = 0
  JMS storeVarToStatusCharMemory
  INC rr0
  LDM 0x0A
  # A = 1
  JMS storeVarToStatusCharMemory
  LDM 0x0F
  # b = 1
  JMS storeVarToStatusCharMemory
  LDM 0x06
  # k = 1
  JMS storeVarToMainMemory
  FIM r0, 0x60
  SRC r0
  CLB
  # v = 0
  WR3
computeF_loop:
  JMS updateB
  JMS updateA
  JMS updateF
  LDM 0x06
  JMS loadVarFromMainMemory
  ISZ rr0, computeF_loopCond
  ISZ rr1, computeF_loopCond
  ISZ rr2, computeF_loopCond
  INC rr3
computeF_loopCond:
  LDM 0x06
  # k = k + 1
  JMS storeVarToMainMemory
  FIM r2, 0xE0
  SRC r2
  RD0
  SUB rr0
  CMC
  RD1
  SUB rr1
  CMC
  RD2
  SUB rr2
  CMC
  RD3
  SUB rr3
  # if k <= N
  JCN c, computeF_loop
  BBL 0

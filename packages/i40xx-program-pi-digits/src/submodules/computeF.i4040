%include "memory.i4040"
%include "mulMulti.i4040"
%include "div16x8.i4040"
%include "mulMod_binary_batch.i4040"
%include "powerCurrentPrime_table.i4040"
%include "addMod.i4040"
%include "computeInvertedA_binary.i4040"

# INPUT:
#   STATUS_MEM_VARIABLE_MODULUS
#   STATUS_MEM_VARIABLE_V
#   STATUS_MEM_VARIABLE_F_COMPUTATION_K
#   STATUS_MEM_VARIABLE_F_COMPUTATION_B
#   STATUS_MEM_VARIABLE_CURRENT_PRIME
# OUTPUT:
#   STATUS_MEM_VARIABLE_F_COMPUTATION_B
#   STATUS_MEM_VARIABLE_V
# VARIABLES:
#   STATUS_MEM_VARIABLE_B_COMPUTATION_COEF
updateB:
  LDM $STATUS_MEM_VARIABLE_F_COMPUTATION_K
  JMS loadVarFromStatusCharMemory

  FIM r4, $STATUS_MEM_VARIABLE_CURRENT_PRIME . $STATUS_MEM_VARIABLE_DIGIT_B_COMPUTATION_COEF
  SRC r4
  RD0
  STC                                           # calculate a - k - 1 to have check (a - k <= 0), otherwise we need to test result for 0
  SUB rr0
  CMC
  RD1
  SUB rr1
  CMC
  RD2
  SUB rr2
  CMC
  RD3
  SUB rr3
  JCN nc, updateB_cont                          # if (a <= k)

  FIM r6, $STATUS_MEM_VARIABLE_F_COMPUTATION_B . 0
  SRC r6
  RD0
  XCH rr0
  RD1
  XCH rr1
  RD2
  XCH rr3
  RD3
  XCH rr2
  FIM r6, $STATUS_MEM_VARIABLE_F_COMPUTATION_K . 0
  FIM r3, 0x04
  JMS mulMod                                     # b = (b * k) % m
  DCL
  FIM r6, $STATUS_MEM_VARIABLE_F_COMPUTATION_B . 0
  SRC r6
  LD rr0
  WR0
  LD rr1
  WR1
  LD rr3
  WR2
  LD rr2
  WR3
  BBL 0

updateB_cont:
  LDM $STATUS_MEM_VARIABLE_B_COMPUTATION_COEF
  JMS storeVarToStatusCharMemory                 # bCoef = k

updateB_loop:
  JMS div16x8                                    # bCoef / a

  LD rr0
  ADD rr1
  ADD rr2
  ADD rr3
  JCN c, updateB_return
  JCN nz, updateB_return                         # if bCoef % a !== 0

  FIM r2, $STATUS_MEM_VARIABLE_B_COMPUTATION_COEF . 0
  SRC r2
  LD rr8
  WR0
  LD rr9
  WR1
  LD rr14
  WR2
  LD rr15
  WR3                                            # bCoef = bCoef / a

  FIM r3, $STATUS_MEM_VARIABLE_V . 0
  SRC r3
  RD3
  DAC                                            # carry flag is set, but it's useful for (bCoef <= a) comparison instead of (bCoef < a)
  WR3                                            # v--

  FIM r3, $STATUS_MEM_VARIABLE_CURRENT_PRIME . $STATUS_MEM_VARIABLE_DIGIT_B_COMPUTATION_COEF
  SRC r3
  RD0
  SUB rr8
  CMC
  RD1
  SUB rr9
  CMC
  RD2
  SUB rr14
  CMC
  RD3
  SUB rr15
  FIM r4, $STATUS_MEM_VARIABLE_CURRENT_PRIME . $STATUS_MEM_VARIABLE_DIGIT_B_COMPUTATION_COEF
  JCN nc, updateB_loop                          # if (bCoef >= a)

updateB_return:
  FIM r6, $STATUS_MEM_VARIABLE_F_COMPUTATION_B . 0
  SRC r6
  RD0
  XCH rr0
  RD1
  XCH rr1
  RD2
  XCH rr3
  RD3
  XCH rr2
  FIM r6, $STATUS_MEM_VARIABLE_B_COMPUTATION_COEF . 0
  FIM r3, 0x04
  JMS mulMod                                     # b = (b * bCoef) % m
  DCL
  FIM r6, $STATUS_MEM_VARIABLE_F_COMPUTATION_B . 0
  SRC r6
  LD rr0
  WR0
  LD rr1
  WR1
  LD rr3
  WR2
  LD rr2
  WR3
  BBL 0

# INPUT:
#   STATUS_MEM_VARIABLE_MODULUS
#   STATUS_MEM_VARIABLE_V
#   STATUS_MEM_VARIABLE_F_COMPUTATION_K
#   STATUS_MEM_VARIABLE_F_COMPUTATION_A
#   STATUS_MEM_VARIABLE_CURRENT_PRIME
# OUTPUT:
#   STATUS_MEM_VARIABLE_F_COMPUTATION_A
#   STATUS_MEM_VARIABLE_V
# VARIABLES:
#   STATUS_MEM_VARIABLE_A_COMPUTATION_COEF
updateA:
  LDM $STATUS_MEM_VARIABLE_F_COMPUTATION_K
  JMS loadVarFromStatusCharMemory                        # rr0..rr3 = k

  LD rr0
  ADD rr0
  XCH rr0
  LD rr1
  ADD rr1
  XCH rr1
  LD rr2
  ADD rr2
  XCH rr2
  LD rr3
  ADD rr3
  XCH rr3                                                # rr0..rr3 = 2 * k

  FIM r2, $STATUS_MEM_VARIABLE_A_COMPUTATION_COEF . 0
  SRC r2
  LD rr0
  DAC
  CMC
  WR0
  XCH rr0
  LD rr1
  SUB rr5
  CMC
  WR1
  XCH rr1
  LD rr2
  SUB rr5
  CMC
  WR2
  XCH rr2
  LD rr3
  SUB rr5                                                # carry flag is set, but it's useful for (ACoef <= a) comparison instead of (ACoef < a)
  WR3
  XCH rr3                                                # ACoef = 2 * k - 1

  FIM r4, $STATUS_MEM_VARIABLE_CURRENT_PRIME . $STATUS_MEM_VARIABLE_DIGIT_A_COMPUTATION_COEF
  SRC r4
  RD0
  SUB rr0
  CMC
  RD1
  SUB rr1
  CMC
  RD2
  SUB rr2
  CMC
  RD3
  SUB rr3
  JCN c, updateA_return                                  # if (a > ACoef)
updateA_loop:
  JMS div16x8                                            # ACoef / a

  LD rr0
  ADD rr1
  ADD rr2
  ADD rr3
  JCN c, updateA_return
  JCN nz, updateA_return                                 # if ACoef % a !== 0

  FIM r2, $STATUS_MEM_VARIABLE_A_COMPUTATION_COEF . 0
  SRC r2
  LD rr8
  WR0
  LD rr9
  WR1
  LD rr14
  WR2
  LD rr15
  WR3                                                    # ACoef = ACoef / a

  FIM r3, $STATUS_MEM_VARIABLE_V . 0
  SRC r3
  RD3
  IAC
  WR3                                                    # v++

  FIM r3, $STATUS_MEM_VARIABLE_CURRENT_PRIME . $STATUS_MEM_VARIABLE_DIGIT_A_COMPUTATION_COEF
  SRC r3
  RD0
  STC                                                    # calculate a - ACoef - 1 to have check (a - ACoef <= 0), otherwise we need to test result for 0
  SUB rr8
  CMC
  RD1
  SUB rr9
  CMC
  RD2
  SUB rr14
  CMC
  RD3
  SUB rr15
  FIM r4, $STATUS_MEM_VARIABLE_CURRENT_PRIME . $STATUS_MEM_VARIABLE_DIGIT_A_COMPUTATION_COEF
  JCN nc, updateA_loop                                   # if (ACoef >= a)

updateA_return:
  FIM r6, $STATUS_MEM_VARIABLE_F_COMPUTATION_A . 0
  SRC r6
  RD0
  XCH rr0
  RD1
  XCH rr1
  RD2
  XCH rr3
  RD3
  XCH rr2
  FIM r6, $STATUS_MEM_VARIABLE_A_COMPUTATION_COEF . 0
  FIM r3, 0x04
  JMS mulMod                                             # A = (A * ACoef) % m
  DCL
  FIM r6, $STATUS_MEM_VARIABLE_F_COMPUTATION_A . 0
  SRC r6
  LD rr0
  WR0
  LD rr1
  WR1
  LD rr3
  WR2
  LD rr2
  WR3
  BBL 0

# INPUT:
#   STATUS_MEM_VARIABLE_V
#   STATUS_MEM_VARIABLE_VMAX
#   STATUS_MEM_VARIABLE_F
#   STATUS_MEM_VARIABLE_F_COMPUTATION_A
#   STATUS_MEM_VARIABLE_F_COMPUTATION_B
#   STATUS_MEM_VARIABLE_F_COMPUTATION_K
#   STATUS_MEM_VARIABLE_CURRENT_PRIME
# OUTPUT:
#   STATUS_MEM_VARIABLE_F
updateF:
  FIM r3, $STATUS_MEM_VARIABLE_V . 0
  SRC r3
  RD3
  JCN z, updateF_ret                             # if (v === 0)

  JMS computeInvertedA                           # fk = (A ^ (-1)) mod m

  # 0xA is necessary to let powerCurrentPrime work properly, because jump table is placed at addresses in form "03:*A"
  FIM r7, $STATUS_MEM_VARIABLE_V . A
  SRC r7
  FIM r3, 0x04
  RD3
  XCH rr8
  RD2
  SUB rr8
  # carry flag would be cleared later (by mulMod or powerCurrentPrime)
  JCN z, updateF_multiplyByB                     # if (vmax - v === 0)

  DAC
  # carry flag would be cleared later (by mulMod or powerCurrentPrime)
  JCN z, updateF_multiplyByCurrentNumber
  JMS powerCurrentPrime
  FIM r6, $STATUS_MEM_VARIABLE_CURRENT_PRIME_POW . 0
  JMS mulMod                                     # fk = (fk * (a ^ (vmax - v))) mod m
  DCL
  JUN updateF_multiplyByB

updateF_multiplyByCurrentNumber:
  FIM r6, $STATUS_MEM_VARIABLE_CURRENT_PRIME . 0
  JMS mulMod                                     # fk = (fk * a) mod m
  DCL

updateF_multiplyByB:
  FIM r6, $STATUS_MEM_VARIABLE_F_COMPUTATION_B . 0
  JMS mulMod                                     # fk = (fk * b) mod m
  DCL

  FIM r6, $STATUS_MEM_VARIABLE_F_COMPUTATION_K . 0
  JMS mulMod                                     # fk = (fk * k) mod m
  DCL

  FIM r4, $STATUS_MEM_VARIABLE_F . 0
  SRC r4
  RD0
  ADD rr0
  XCH rr4
  RD1
  ADD rr1
  XCH rr5
  RD2
  ADD rr3
  XCH rr7
  RD3
  ADD rr2                                        # tmp = f + fk
  JCN z, updateF_writeF                          # if (f < 0x1000)
  XCH rr6

  CLB
  DCL
  SRC r3
  RD0
  ADD rr4
  XCH rr4
  RD1
  ADD rr5
  XCH rr5
  RD2
  ADD rr7
  XCH rr7
  RD3
  ADD rr6
  XCH rr6                                        # f = f - m * floor((f[3] * 0x1000) / m)
  LDM 0x7
  DCL
  CLB
  LD rr6

updateF_writeF:
  WR3
  LD rr4
  WR0
  LD rr5
  WR1
  LD rr7
  WR2

updateF_ret:
  BBL 0

# INPUT:
#   STATUS_MEM_VARIABLE_MODULUS
#   STATUS_MEM_VARIABLE_MODULUS_NEG
#   STATUS_MEM_VARIABLE_CURRENT_PRIME
#   STATUS_MEM_VARIABLE_N_NEG
#   STATUS_MEM_VARIABLE_VMAX
# OUTPUT:
#   STATUS_MEM_VARIABLE_F
# VARIABLES:
#   STATUS_MEM_VARIABLE_F_COMPUTATION_A
#   STATUS_MEM_VARIABLE_F_COMPUTATION_K
#   STATUS_MEM_VARIABLE_F_COMPUTATION_B
#   STATUS_MEM_VARIABLE_V
# NOTES:
#   works with prime numbers, that are smaller than sqrt(2 * N)
__rom_bank(1)
computeF:
  LDM $STATUS_MEM_VARIABLE_F
  JMS clearVarFromStatusCharMemory                    # f = 0

  LDM $STATUS_MEM_VARIABLE_F_COMPUTATION_A
  JMS clearVarFromStatusCharMemory
  LDM 0x1
  WR0                                                 # A = 1

  LDM $STATUS_MEM_VARIABLE_F_COMPUTATION_B
  JMS clearVarFromStatusCharMemory
  LDM 0x1
  WR0                                                 # b = 1

  LDM $STATUS_MEM_VARIABLE_F_COMPUTATION_K
  JMS clearVarFromStatusCharMemory
  LDM 0x2
  WR0                                                 # k = 2

  FIM r0, $STATUS_MEM_VARIABLE_V . 0
  SRC r0
  CLB
  WR3                                                 # v = 0

computeF_loop:
  JMS updateB
  JMS updateA
  JMS updateF

  FIM r4, $STATUS_MEM_VARIABLE_N_NEG . 0
  FIM r1, $STATUS_MEM_VARIABLE_F_COMPUTATION_K . 1
  SRC r1
  RD0
  ADD rr3
  WR0
  XCH rr4
  RD1
  ADD rr9
  WR1
  XCH rr5
  RD2
  ADD rr9
  WR2
  XCH rr6
  RD3
  ADD rr9
  WR3
  XCH rr7                                             # rr4..rr7 = k = k + 1

  SRC r4
  RD0
  ADD rr4
  RD1
  ADD rr5
  RD2
  ADD rr6
  RD3
  ADD rr7
  JCN nc, computeF_loop                                # if rr4..rr7 <= N

  DB0
  CLC
  BBL 0

# INPUT:
#   STATUS_MEM_VARIABLE_MODULUS
#   STATUS_MEM_VARIABLE_MODULUS_NEG
#   STATUS_MEM_VARIABLE_N_NEG
# OUTPUT:
#   STATUS_MEM_VARIABLE_F
# VARIABLES:
#   STATUS_MEM_VARIABLE_F_COMPUTATION_ZERO_V_LOOP_LIMIT
#   STATUS_MEM_VARIABLE_F_COMPUTATION_A
#   STATUS_MEM_VARIABLE_F_COMPUTATION_B
#   STATUS_MEM_VARIABLE_F_COMPUTATION_K_INV
#   STATUS_MEM_VARIABLE_F_COMPUTATION_MULTIPLIER_A
#   STATUS_MEM_VARIABLE_F_COMPUTATION_MULTIPLIER_B
#   STATUS_MEM_VARIABLE_F_COMPUTATION_REDUCED_COEF_A
#   STATUS_MEM_VARIABLE_F_COMPUTATION_REDUCED_COEF_B
# NOTES:
#   works with prime numbers, that are bigger than sqrt(2 * N), so vmax is always 1
__rom_bank(1)
computeF_oneVMax:
  FIM r1, $STATUS_MEM_VARIABLE_MODULUS . 0
  SRC r1
  RD0
  IAC
  XCH rr6
  RD1
  ADD rr3
  XCH rr7
  RD2
  ADD rr3
  XCH rr8
  RD3
  ADD rr3
  XCH rr9

  FIM r1, $STATUS_MEM_VARIABLE_F_COMPUTATION_ZERO_V_LOOP_LIMIT . 0
  SRC r1
  LD rr9
  RAR
  WR3
  LD rr8
  RAR
  WR2
  LD rr7
  RAR
  WR1
  LD rr6
  RAR
  WR0                                                                # iterIdxForPositiveV = (a + 1) / 2

  FIM r0, 0x20
  FIM r1, 0x00                                                       # multiplierForZeroV = 2

  FIM r3, 0x04
  FIM r6, $STATUS_MEM_VARIABLE_F_COMPUTATION_ZERO_V_MULTIPLIER_B_FACTOR . 0
  SRC r6
  LDM 0x3
  WR0
  CLB
  WR1
  WR2
  WR3                                                                # factorOfMultiplierForZeroV = 3

computeF_oneVMax_multiplierForZeroV_loop:
  JMS mulMod                                                         # multiplierForZeroV = (multiplierForZeroV * factorOfMultiplierForZeroV) % a
  DCL

  RD0
  IAC
  WR0
  XCH rr8
  RD1
  ADD rr13
  WR1
  XCH rr9
  RD2
  ADD rr13
  WR2
  XCH rr10
  RD3
  ADD rr13
  WR3
  XCH rr11                                                           # factorOfMultiplierForZeroV++

  FIM r6, $STATUS_MEM_VARIABLE_F_COMPUTATION_ZERO_V_LOOP_LIMIT . 0
  SRC r6
  STC
  RD0
  SUB rr8
  CMC
  RD1
  SUB rr9
  CMC
  RD2
  SUB rr10
  CMC
  RD3
  SUB rr11
  # XXX: relies that factorOfMultiplierForZeroV in next memory register after iterIdxForPositiveV
  INC rr12
  JCN c, computeF_oneVMax_multiplierForZeroV_loop                    # if (factorOfMultiplierForZeroV < iterIdxForPositiveV)

  FIM r6, $STATUS_MEM_VARIABLE_F_COMPUTATION_ZERO_V_MULTIPLIER_B . 0
  SRC r6
  LD rr0
  WR0
  LD rr1
  WR1
  LD rr3
  WR2
  LD rr2
  WR3

  FIM r0, $STATUS_MEM_VARIABLE_N_NEG . 0
  SRC r0
  RD0
  ADD rr8
  XCH rr8
  RD1
  ADD rr9
  XCH rr9
  RD2
  ADD rr10
  XCH rr10
  RD3
  ADD rr11
  XCH rr11

  FIM r0, $STATUS_MEM_VARIABLE_F_COMPUTATION_K_NEG . 0
  SRC r0
  LD rr8
  WR0
  LD rr9
  WR1
  LD rr10
  WR2
  LD rr11
  WR3                                                                # loop iterations = N - iterIdxForPositiveV + 1

  FIM r0, $STATUS_MEM_VARIABLE_F_COMPUTATION_MULTIPLIER_A . 0
  SRC r0
  LDM 0x1
  WR0
  WR2
  CLB
  WR1
  WR3                                                                # multiplierA = 1, multiplierB = 1

  FIM r0, $STATUS_MEM_VARIABLE_F_COMPUTATION_REDUCED_COEF_A . 0
  SRC r0
  WR1
  WR2
  WR3
  LDM 0x3
  WR0                                                                # reducedCoefA = 3

  FIM r1, $STATUS_MEM_VARIABLE_F . 0
  SRC r1
  CLB
  WR0
  WR1
  WR2
  WR3                                                                # f = 0

  INC rr2
  SRC r1
  WR1
  WR2
  WR3
  LDM 0x1
  WR0                                                                # A = 1

  FIM r2, $STATUS_MEM_VARIABLE_F_COMPUTATION_B . 0
  SRC r2
  WR0
  CLB
  WR1
  WR2
  WR3                                                                # b = 1

computeF_oneVMax_loop:
  CLB
  FIM r0, $STATUS_MEM_VARIABLE_F_COMPUTATION_REDUCED_COEF_B . 0
  SRC r0
  WR1
  WR2
  WR3
  LDM 0x2
  WR0                                                                # reducedCoefB = 2

  FIM r0, $STATUS_MEM_VARIABLE_F_COMPUTATION_A . 0
  SRC r0
  RD0
  XCH rr0
  RD1
  XCH rr1
  RD2
  XCH rr3
  RD3
  XCH rr2

computeF_zeroV_loop:
  JMS computeF_oneVMax_updateA_reducedCoef_factorLoaded

  FIM r6, $STATUS_MEM_VARIABLE_F_COMPUTATION_REDUCED_COEF_B . 0
  SRC r6
  RD0
  IAC
  WR0
  XCH rr8
  RD1
  ADD rr13
  WR1
  XCH rr9
  RD2
  ADD rr13
  WR2
  XCH rr10
  RD3
  ADD rr13
  WR3
  XCH rr11                                                           # reducedCoefB++

  FIM r6, $STATUS_MEM_VARIABLE_F_COMPUTATION_ZERO_V_LOOP_LIMIT . 0
  SRC r6
  STC
  RD0
  SUB rr8
  CMC
  RD1
  SUB rr9
  CMC
  RD2
  SUB rr10
  CMC
  RD3
  SUB rr11
  INC rr12
  JCN c, computeF_zeroV_loop                                         # if (reducedCoefB < iterIdxForPositiveV)

  FIM r6, $STATUS_MEM_VARIABLE_F_COMPUTATION_B . 0
  SRC r6
  RD0
  XCH rr0
  RD1
  XCH rr1
  RD2
  XCH rr3
  RD3
  XCH rr2
  FIM r6, $STATUS_MEM_VARIABLE_F_COMPUTATION_ZERO_V_MULTIPLIER_B . 0
  JMS mulMod
  DCL
  FIM r6, $STATUS_MEM_VARIABLE_F_COMPUTATION_B . 0
  SRC r6
  LD rr0
  WR0
  LD rr1
  WR1
  LD rr3
  WR2
  LD rr2
  WR3                                                                # b = (b * multiplierForZeroV) % a;

  JMS computeF_oneVMax_updateA_multiplier
  JMS computeF_oneVMax_updateF

  FIM r0, 0x10
  FIM r1, 0x00
  JMS computeF_oneVMax_updateK
  JCN nz, computeF_oneVMax_return

  FIM r6, $STATUS_MEM_VARIABLE_F_COMPUTATION_REDUCED_COEF_A . 0
  SRC r6
  LDM 0x2
  WR0
  CLB
  WR1
  WR2
  WR3                                                                # reducedCoefA = 2

computeF_oneV_loop:
  JMS computeF_oneVMax_updateA_reducedCoef
  JMS computeF_oneVMax_updateF

  FIM r0, 0x10
  FIM r1, 0x00
  JMS computeF_oneVMax_updateK
  JCN nz, computeF_oneVMax_return

  FIM r6, $STATUS_MEM_VARIABLE_MODULUS_NEG . 0
  SRC r6
  RD0
  ADD rr8
  RD1
  ADD rr9
  RD2
  ADD rr10
  RD3
  ADD rr11
  JCN nc, computeF_oneV_loop                                         # if (reducedCoefB < a)

  CLB
  FIM r6, $STATUS_MEM_VARIABLE_F_COMPUTATION_ZERO_V_LOOP_LIMIT . 0
  SRC r6
  RD0
  XCH rr0
  RD1
  XCH rr1
  RD2
  XCH rr2
  RD3
  XCH rr3
  JMS computeF_oneVMax_updateK
  JCN nz, computeF_oneVMax_return

  JMS computeF_oneVMax_updateB_multiplier

  FIM r6, $STATUS_MEM_VARIABLE_F_COMPUTATION_A . 0
  SRC r6
  RD0
  XCH rr0
  RD1
  XCH rr1
  RD2
  XCH rr3
  RD3
  XCH rr2
  FIM r6, $STATUS_MEM_VARIABLE_F_COMPUTATION_REDUCED_COEF_A . 0
  JMS mulMod
  DCL

  RD0
  XCH rr8
  RD1
  XCH rr9
  RD2
  XCH rr10
  RD3
  XCH rr11

  FIM r6, $STATUS_MEM_VARIABLE_F_COMPUTATION_A . 0
  SRC r6
  LD rr0
  WR0
  LD rr1
  WR1
  LD rr3
  WR2
  LD rr2
  WR3                                                                # A = (A * reducedCoefA) % a

  FIM r6, $STATUS_MEM_VARIABLE_F_COMPUTATION_REDUCED_COEF_A . 0
  FIM r0, $STATUS_MEM_VARIABLE_MODULUS_NEG . 1
  SRC r0
  STC
  RD0
  ADD rr8
  RD1
  ADD rr9
  RD2
  ADD rr10
  RD3
  ADD rr11
  JCN nc, computeF_oneVMax_lowCoefA                                   # if (reducedCoefA < (a - 1))

  SRC r6
  LDM 0x3
  WR0
  CLB
  WR1
  WR2
  WR3                                                                # reducedCoefA = 3
  JUN computeF_oneVMax_loop

computeF_oneVMax_lowCoefA:
  SRC r6
  RD0
  ADD rr2
  WR0
  RD1
  ADD rr13
  WR1
  RD2
  ADD rr13
  WR2
  RD3
  ADD rr13
  WR3                                                                # reducedCoefA = reducedCoefA + 2

  JMS computeF_oneVMax_updateA_reducedCoef

  JUN computeF_oneVMax_loop
computeF_oneVMax_return:
  DB0
  NOP
  BBL 0

computeF_oneVMax_updateB_multiplier:
  FIM r6, $STATUS_MEM_VARIABLE_F_COMPUTATION_B . 0
  SRC r6
  RD0
  XCH rr0
  RD1
  XCH rr1
  RD2
  XCH rr3
  RD3
  XCH rr2
  FIM r6, $STATUS_MEM_VARIABLE_F_COMPUTATION_MULTIPLIER_B . 0
  SRC r6
  RD2
  XCH rr12
  RD3
  XCH rr11
  FIM r7, 0x00
  JMS mulMod_shiftedFactorLoaded
  DCL

  RD2
  IAC
  WR2
  RD3
  ADD rr13
  WR3                                                                # multiplierB = multiplierB + 1

  FIM r6, $STATUS_MEM_VARIABLE_F_COMPUTATION_B . 0
  SRC r6
  LD rr0
  WR0
  LD rr1
  WR1
  LD rr3
  WR2
  LD rr2
  WR3                                                                # b = (b * multiplierB) % a;

  BBL 0

computeF_oneVMax_updateA_multiplier:
  FIM r6, $STATUS_MEM_VARIABLE_F_COMPUTATION_A . 0
  SRC r6
  RD0
  XCH rr0
  RD1
  XCH rr1
  RD2
  XCH rr3
  RD3
  XCH rr2
  FIM r6, $STATUS_MEM_VARIABLE_F_COMPUTATION_MULTIPLIER_A . 0
  SRC r6
  RD0
  XCH rr12
  RD1
  XCH rr11
  FIM r7, 0x00
  JMS mulMod_shiftedFactorLoaded
  DCL

  FIM r5, $STATUS_MEM_VARIABLE_F_COMPUTATION_A . 2

  RD0
  ADD rr11
  WR0
  RD1
  ADD rr13
  WR1                                                                # multiplierA = multiplierA + 2

  SRC r5
  LD rr0
  WR0
  LD rr1
  WR1
  LD rr3
  WR2
  LD rr2
  WR3                                                                # A = (A * multiplierA) % a

  BBL 0

computeF_oneVMax_updateK:
  FIM r7, $STATUS_MEM_VARIABLE_F_COMPUTATION_K_NEG . 0
  SRC r7
  RD0
  ADD rr0
  WR0
  RD1
  ADD rr1
  WR1
  RD2
  ADD rr2
  WR2
  RD3
  ADD rr3
  WR3
  JCN c, computeF_oneVMax_updateK_shouldStop
  BBL 0
computeF_oneVMax_updateK_shouldStop:
  CLB
  BBL 1

computeF_oneVMax_updateA_reducedCoef:
  FIM r6, $STATUS_MEM_VARIABLE_F_COMPUTATION_A . 0
  SRC r6
  RD0
  XCH rr0
  RD1
  XCH rr1
  RD2
  XCH rr3
  RD3
  XCH rr2
computeF_oneVMax_updateA_reducedCoef_factorLoaded:
  FIM r6, $STATUS_MEM_VARIABLE_F_COMPUTATION_REDUCED_COEF_A . 0
  JMS mulMod
  DCL

  FIM r5, $STATUS_MEM_VARIABLE_F_COMPUTATION_A . 2

  RD0
  ADD rr11
  WR0
  RD1
  ADD rr13
  WR1
  RD2
  ADD rr13
  WR2
  RD3
  ADD rr13
  WR3                                                                # reducedCoefA = reducedCoefA + 2

  SRC r5
  LD rr0
  WR0
  LD rr1
  WR1
  LD rr3
  WR2
  LD rr2
  WR3                                                                # A = (A * reducedCoefA) % a
  BBL 0

computeF_oneVMax_updateF:
  FIM r6, $STATUS_MEM_VARIABLE_F_COMPUTATION_B . 0
  SRC r6
  RD0
  XCH rr0
  RD1
  XCH rr1
  RD2
  XCH rr3
  RD3
  XCH rr2
  FIM r6, $STATUS_MEM_VARIABLE_F_COMPUTATION_REDUCED_COEF_B . 0
  JMS mulMod
  DCL

  FIM r6, $STATUS_MEM_VARIABLE_F_COMPUTATION_B . 0
  SRC r6
  LD rr0
  WR0
  LD rr1
  WR1
  LD rr3
  WR2
  LD rr2
  WR3                                                                # b = (b * reducedCoefB) % a

  JMS computeInvertedA                                               # fk = modularInverse(A, a)

  FIM r3, 0x04
  FIM r6, $STATUS_MEM_VARIABLE_F_COMPUTATION_B . 0
  JMS mulMod                                                         # fk = (fk * b) % a
  DCL

  FIM r6, $STATUS_MEM_VARIABLE_F_COMPUTATION_REDUCED_COEF_B . 0
  JMS mulMod                                                         # fk = (fk * reducedCoefB) % a
  DCL

  FIM r4, $STATUS_MEM_VARIABLE_F . 0
  SRC r4
  RD0
  ADD rr0
  XCH rr4
  RD1
  ADD rr1
  XCH rr5
  RD2
  ADD rr3
  XCH rr11
  RD3
  ADD rr2                                                            # tmp = f + fk
  JCN z, computeF_oneVMax_updateF_writeF                             # if (f < 0x1000)
  XCH rr10

  CLB
  DCL
  SRC r5
  RD0
  ADD rr4
  XCH rr4
  RD1
  ADD rr5
  XCH rr5
  RD2
  ADD rr11
  XCH rr11
  RD3
  ADD rr10
  XCH rr10                                                           # f = f - m * floor((f[3] * 0x1000) / m)
  LDM 0x7
  DCL
  CLB
  LD rr10

computeF_oneVMax_updateF_writeF:
  WR3
  LD rr4
  WR0
  LD rr5
  WR1
  LD rr11
  WR2                                                                # f = f + fk

  FIM r6, $STATUS_MEM_VARIABLE_F_COMPUTATION_REDUCED_COEF_B . 0
  SRC r6
  RD0
  IAC
  WR0
  XCH rr8
  RD1
  ADD rr13
  WR1
  XCH rr9
  RD2
  ADD rr13
  WR2
  XCH rr10
  RD3
  ADD rr13
  WR3
  XCH rr11                                                           # reducedCoefB++
  BBL 0

%include "memory.i4040"
%include "divMulti.i4040"
%include "mulMulti.i4040"
%include "add16.i4040"
%include "primes.i4040"
%include "computeF.i4040"
%include "digitsChunks.i4040"

# INPUT:
#   memMainVar[0x0B] - digitsCount
# OUTPUT:
#   memStatusCharVar[0x06] - chunksCount
computeChunksCount:
  LDM 0x0B
  JMS loadVarFromMainMemory
  LDM 0x08
  JMS storeVarToMainMemory
  FIM r0, 0x90
  FIM r1, 0x00
  LDM 0x09
  JMS storeVarToMainMemory
  JMS divMWxMW                       # memMainVar[0x0A] = digitsCount / 9
  LDM 0x0A
  JMS loadVarFromMainMemory
  LD rr0
  DAC
  CMC
  XCH rr0
  LD rr1
  SUB rr2
  XCH rr1
  CLC
  LDM 0x06
  JMS storeVarToStatusCharMemory     # chunksCount = memMainVar[0x0A]
  BBL 0

# INPUT:
#   memMainVar[0x0B] - digitsCount
#   memStatusCharVar[0x0C] - startingPosition
# OUTPUT:
#   memStatusCharVar[0x0E] - N
# VARIABLES:
#   rr4..rr7 - tmp
computeN:
  LDM 0x0B
  JMS loadVarFromMainMemory
  FIM r6, 0x90
  LD rr0
  SUB rr12
  CMC
  XCH rr4
  LD rr1
  SUB rr13
  CMC
  XCH rr5
  LD rr2
  SUB rr13
  CMC
  XCH rr6
  LD rr3
  SUB rr13
  CMC
  XCH rr7                            # tmp = digitsCount - 9
  LDM 0x0C
  JMS loadVarFromStatusCharMemory
  JMS add16x16                       # n = tmp + startingPosition
  FIM r2, 0x41
  FIM r3, 0x00
  JMS add16x16                       # rr0..rr3 = n + 20
  LDM 0x06
  JMS storeVarToMainMemory
  FIM r0, 0xD5
  FIM r1, 0x00
  LDM 0x07
  JMS storeVarToMainMemory
  LDM 0x06
  XCH rr2
  LDM 0x07
  XCH rr4
  JMS mulMWxMW                       # memMainVar[0x08] = (n + 20) * 93
  FIM r0, 0xC1
  FIM r1, 0x00
  LDM 0x09
  JMS storeVarToMainMemory
  JMS divMWxMW                       # memMainVar[0xA] = (n + 20) * 93 / 28
  LDM 0x0A
  JMS loadVarFromMainMemory
  LDM 0x0E
  JMS storeVarToStatusCharMemory
  BBL 0

# INPUT:
#   memStatusCharVar[0x0C] - startingPosition
#   memMainVar[0x0B] - digitsCount
# OUTPUT:
#   memStatusCharVar[0x06] - chunksCount
getPiDigits:
  JMS computeChunksCount
  JMS computeN
  JMS initPrimes
getPiDigits_loop:
  JMS getNextPrime
  FIM r0, 0xB9
  JMS compareVarsFromMainMemory
  # if 2 * N > a, then carry is set
  JCN nc, getPiDigits_loopEnd
  JMS computeMaxVAndM
  JMS computeF
  JMS updateDigitsChunks
  JUN getPiDigits_loop
getPiDigits_loopEnd:
  JMS printPiDigits
  BBL 0

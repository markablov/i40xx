%include "memory.i4040"
%include "mul4_table.i4040"
%include "div16_fast.i4040"
%include "add16.i4040"
%include "sub16.i4040"

# INPUT:
#   rr0..rr3 - first factor
#   rr10..rr11 - second factor
# OUTPUT:
#   [rr8, rr9, rr14, rr15] - product
# NOTES:
#   - beside input registers, can use only rr12 and rr13
#   - partially uses last accessed memory register in variables bank
mul16x8:
  LD rr11
  JCN nz, mul16x8_mulBy8bit
  LD rr10
  DAC
  CLC
  JCN z, mul16x8_mulBy1

mul16x8_mulBy4bit:
mul16x8_mulBy4bit_digit0:
  LD rr0
  JMS mul4x4                  # low, high = a0 * b
  LD rr12
  XCH rr8                     # r0 = low
  LD rr13
  XCH rr9                     # r1 = high
mul16x8_mulBy4bit_digit1:
  LD rr1
  JMS mul4x4                  # low, high = a1 * b
  LD rr12
  ADD rr9
  XCH rr9                     # r1, c = low + r1
  LDM 0x0
  ADD rr13
  XCH rr14                    # r2 = high + c
mul16x8_mulBy4bit_digit2:
  LD rr2
  JMS mul4x4                  # low, high = a2 * b
  LD rr12
  ADD rr14
  XCH rr14                    # r2, c = low + r2
  LDM 0x0
  ADD rr13
  XCH rr15                    # r3 = high + c
mul16x8_mulBy4bit_digit3:
  LD rr3
  JMS mul4x4                  # low, high = a3 * b
  DCL
  LD rr12
  ADD rr15
  XCH rr15                    # r3 = low + r3
  BBL 0

mul16x8_mulBy8bit:
  WRM                         # save b1
  LDM 0x0
  XCH rr11
  JMS mul16x8_mulBy4bit
  RDM
  XCH rr10
mul16x8_mulBy8bit_digit0:
  LD rr0
  JMS mul4x4                  # low, high = a0 * b1
  LD rr12
  ADD rr9
  XCH rr9                     # r1, c = r1 + low
  LD rr13
  ADD rr14
  XCH rr14                    # r2, c = r2 + c + high
mul16x8_mulBy8bit_digit1:
  LD rr1
  JMS mul4x4                  # low, high = a1 * b1
  LD rr12
  ADD rr14
  XCH rr14                    # r2, c = r2 + low
  LD rr13
  ADD rr15
  XCH rr15                    # r3, c = r3 + c + high
mul16x8_mulBy8bit_digit2:
  LD rr2
  JMS mul4x4                  # low, high = a2 * b1
  DCL
  LD rr12
  ADD rr15
  XCH rr15                    # r4 = r4 + low
  BBL 0

mul16x8_mulBy1:
  LD rr0
  XCH rr8
  LD rr1
  XCH rr9
  LD rr2
  XCH rr14
  LD rr3
  XCH rr15
  BBL 0

# INPUT:
#   STATUS_MEM_VARIABLE_MODULUS
#   STATUS_MEM_VARIABLE_F_COMPUTATION_A
# OUTPUT:
#   STATUS_MEM_VARIABLE_F_COMPUTATION_FK
# NOTES:
#   uses all registers in both banks
computeInvertedA:
  LDM $STATUS_MEM_VARIABLE_F_COMPUTATION_A
  JMS loadVarFromStatusCharMemory                             # rr0..rr3 = A

  LD rr0
  DAC
  CLC
  JCN nz, computeInvertedA_nonTrivialA
  LD rr1
  JCN nz, computeInvertedA_nonTrivialA
  LD rr2
  JCN nz, computeInvertedA_nonTrivialA
  LD rr3
  JCN nz, computeInvertedA_nonTrivialA                        # if rr0..rr3 !== 1

computeInvertedA_trivialA:
  LDM $STATUS_MEM_VARIABLE_F_COMPUTATION_FK
  JMS storeVarToStatusCharMemory
  BBL 0                                                       # return 1

computeInvertedA_nonTrivialA:
  LDM $STATUS_MEM_VARIABLE_INV_R
  JMS storeVarToStatusCharMemory                              # r = rr0..rr3 (A)

  LDM $STATUS_MEM_VARIABLE_MODULUS
  JMS loadVarFromStatusCharMemory
  LDM $STATUS_MEM_VARIABLE_INV_PREV_R
  JMS storeVarToStatusCharMemory                              # prevR = m

  FIM r2, $STATUS_MEM_VARIABLE_F_COMPUTATION_FK . 0
  SRC r2
  WR1
  WR2
  WR3
  IAC
  WR0                                                         # A_inv = 1

  LDM 0xF
  WRM                                                         # sign = true

  LDM $STATUS_MEM_VARIABLE_INV_PREV_P
  JMS clearVarFromStatusCharMemory                            # prevP = 0

computeInvertedA_loop:
  FIM r4, $STATUS_MEM_VARIABLE_INV_R . $STATUS_MEM_VARIABLE_DIGIT_INV_PREV_R
  JMS div16x16                                                # [rr8, rr9, rr14, rr15; rr0..rr3] = prevR / r

  LD rr0
  DAC
  CLC
  JCN nz, computeInvertedA_loop_continue
  LD rr1
  JCN nz, computeInvertedA_loop_continue
  LD rr2
  JCN nz, computeInvertedA_loop_continue
  LD rr3
  JCN z, computeInvertedA_ret                                 # if rr0..rr3 (reminder) !== 1

computeInvertedA_loop_continue:
  FIM r2, $STATUS_MEM_VARIABLE_INV_R . 0
  SRC r2
  RD0
  XCH rr0
  WR0
  RD1
  XCH rr1
  WR1
  RD2
  XCH rr2
  WR2
  RD3
  XCH rr3
  WR3                                                         # rr0..rr3 <-> r

  LDM $STATUS_MEM_VARIABLE_INV_PREV_R
  JMS storeVarToStatusCharMemory                              # prevR = rr0..rr3 (tmp, previous value of r)

  JMS computeInvertedA_computeBezoutCoef

  LDM $STATUS_MEM_VARIABLE_F_COMPUTATION_FK
  JMS storeVarToStatusCharMemory                              # A_inv = rr0..rr3

  JUN computeInvertedA_loop

computeInvertedA_ret:
  JMS computeInvertedA_computeBezoutCoef

  FIM r4, $MAIN_MEM_VARIABLE_INV_P_SIGN . 0
  SRC r4
  RDM
  JCN nz, computeInvertedA_result_positive                     # if (sign)

  FIM r4, $STATUS_MEM_VARIABLE_MODULUS . 0
  SRC r4
  RD0
  XCH rr4
  RD1
  XCH rr5
  RD2
  XCH rr6
  RD3
  XCH rr7                                                     # rr4..rr7 = modulus

  JMS sub16x16                                                # rr0..rr3 = rr4..rr7 - rr0..rr3

computeInvertedA_result_positive:
  LDM $STATUS_MEM_VARIABLE_F_COMPUTATION_FK
  JMS storeVarToStatusCharMemory                              # A_inv = rr0..rr3
  BBL 0

computeInvertedA_computeBezoutCoef:
  # we are sure that accumulator is always zero here, so we set rr1 to 0 to select first main character in memory to update sign later
  XCH rr1
  LDM $STATUS_MEM_VARIABLE_F_COMPUTATION_FK
  JMS loadVarFromStatusCharMemory                             # rr0..rr3 = A_inv

  RDM
  CMA
  WRM                                                         # sign = !sign

  FIM r5, $STATUS_MEM_VARIABLE_INV_PREV_P . 0
  SRC r5
  RD0
  XCH rr4
  LD rr0
  WR0
  RD1
  XCH rr5
  LD rr1
  WR1
  RD2
  XCH rr6
  LD rr2
  WR2
  RD3
  XCH rr7
  LD rr3
  WR3                                                         # rr4..rr7 (tmp) = prevP, prevP = rr0..rr3 (A_inv)

  LD rr14
  ADD rr15
  JCN nz, computeInvertedA_computeBezoutCoef_swapFactors     # if (quotient[2] + quotient[3] > 0) => if (quotient > 256)
  JCN c, computeInvertedA_computeBezoutCoef_swapFactors

  LD rr8
  XCH rr10
  LD rr9
  XCH rr11                                                    # rr10..rr11 = quotient

computeInvertedA_computeBezoutCoef_cont:
  JMS mul16x8                                                 # [rr8, rr9, rr14, rr15] = rr0..rr3 * rr10..rr11 = A_inv * q
  JMS add_r2r3_r4r7                                           # rr0..rr3 = [rr8, rr9, rr14, rr15] + rr4..rr7 (tmp)
  BBL 0

computeInvertedA_computeBezoutCoef_swapFactors:
  LD rr0
  XCH rr10
  LD rr1
  XCH rr11                                                    # rr10..rr11 = A_inv

  LD rr8
  XCH rr0
  LD rr9
  XCH rr1
  LD rr14
  XCH rr2
  LD rr15
  XCH rr3                                                     # rr0..rr3 = quotient

  JUN computeInvertedA_computeBezoutCoef_cont

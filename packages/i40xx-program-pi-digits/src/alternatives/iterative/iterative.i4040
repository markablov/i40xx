%include "../submodules/memory.i4040"
%include "../submodules/mulMulti.i4040"
%include "../submodules/powerMod.i4040"
%include "../submodules/mulMod.i4040"
%include "../submodules/divMulti.i4040"
%include "../submodules/shiftMulti.i4040"
%include "../submodules/addMod.i4040"
%include "../submodules/addMulti.i4040"

__location(00:0x00)
entrypoint:
  JUN updateDigits

# INPUT:
#   MAIN_MEM_VARIABLE_CURRENT_PRIME
#   STATUS_MEM_VARIABLE_N
#   MAIN_MEM_VARIABLE_DOUBLED_N
#   STATUS_MEM_VARIABLE_STARTING_PI_DIGITS_POSITION
#   digits
# OUTPUT:
#   digits
updateDigits:
  JMS computeMaxVAndM
  JMS computeF
  JMS updateDigits_computedF
  HLT

# INPUT:
#   STATUS_MEM_VARIABLE_F
#   STATUS_MEM_VARIABLE_STARTING_PI_DIGITS_POSITION
updateDigits_computedF:
  JMS computeDi
  JCN nz, updateDigits_computedF_return
  FIM r0, 0x00
  FIM r1, 0x00
  JMS addMWxMW
updateDigits_computedF_return:
  BBL 0

# INPUT:
#   STATUS_MEM_VARIABLE_STARTING_PI_DIGITS_POSITION
#   STATUS_MEM_VARIABLE_F
#   MAIN_MEM_VARIABLE_M
# OUTPUT:
#   MAIN_MEM_VARIABLE_DI
computeDi:
  LDM 0x0A
  JMS clearVarFromMainMemory
  LDM $STATUS_MEM_VARIABLE_STARTING_PI_DIGITS_POSITION
  JMS loadVarFromStatusCharMemory
  LDM $MAIN_MEM_VARIABLE_POWER_MOD_EXP
  JMS storeVarToMainMemory
  FIM r0, 0xA0
  FIM r1, 0x00
  JMS powerMod                       # d = (10 ^ digitPosition) mod m
  FIM r7, $STATUS_MEM_VARIABLE_D . 0
  SRC r7
  RD0
  JCN nz, computeDi_powerIsNotZero
  RD1
  JCN nz, computeDi_powerIsNotZero
  RD2
  JCN nz, computeDi_powerIsNotZero
  RD3
  JCN nz, computeDi_powerIsNotZero
  BBL 1

computeDi_powerIsNotZero:
  FIM r7, $STATUS_MEM_VARIABLE_F . $STATUS_MEM_VARIABLE_DIGIT_D
  SRC r7
  RD0
  JCN nz, computeDi_fIsNotZero
  RD1
  JCN nz, computeDi_fIsNotZero
  RD2
  JCN nz, computeDi_fIsNotZero
  RD3
  JCN nz, computeDi_fIsNotZero
  BBL 1

computeDi_fIsNotZero:
  JMS mulMod                         # d = (d * f) mod m
  LDM $STATUS_MEM_VARIABLE_D
  JMS loadVarFromStatusCharMemory
  LDM $MAIN_MEM_VARIABLE_D
  JMS storeVarToMainMemory
  JMS write1e15
  FIM r1, $MAIN_MEM_VARIABLE_D . 0
  FIM r2, $MAIN_MEM_VARIABLE_10E15 . 0
  JMS mulMWxMW                       # d = d * (10 ^ 15)
  LDM $MAIN_MEM_VARIABLE_DIV_DIVISOR
  JMS clearVarFromMainMemory
  LDM $MAIN_MEM_VARIABLE_M
  JMS loadVarFromMainMemory
  LDM $MAIN_MEM_VARIABLE_DIV_DIVISOR
  JMS storeVarToMainMemory
  JMS divMWxMW
  BBL 0


# INPUT:
#   MAIN_MEM_VARIABLE_M
#   STATUS_MEM_VARIABLE_N
#   MAIN_MEM_VARIABLE_CURRENT_PRIME
#   STATUS_MEM_VARIABLE_VMAX
# OUTPUT:
#   STATUS_MEM_VARIABLE_F
computeF:
  FIM r0, 0x00
  FIM r1, 0x00
  LDM $STATUS_MEM_VARIABLE_F
  # f = 0
  JMS storeVarToStatusCharMemory
  INC rr0
  LDM $STATUS_MEM_VARIABLE_F_COMPUTATION_A
  # A = 1
  JMS storeVarToStatusCharMemory
  LDM $STATUS_MEM_VARIABLE_F_COMPUTATION_B
  # b = 1
  JMS storeVarToStatusCharMemory
  LDM $MAIN_MEM_VARIABLE_F_COMPUTATION_K
  # k = 1
  JMS storeVarToMainMemory
  FIM r0, $STATUS_MEM_VARIABLE_V . 0
  SRC r0
  CLB
  # v = 0
  WR3
computeF_loop:
  JMS updateB
  JMS updateA
  JMS updateF
  LDM $MAIN_MEM_VARIABLE_F_COMPUTATION_K
  JMS loadVarFromMainMemory
  ISZ rr0, computeF_loopCond
  ISZ rr1, computeF_loopCond
  ISZ rr2, computeF_loopCond
  INC rr3
computeF_loopCond:
  LDM $MAIN_MEM_VARIABLE_F_COMPUTATION_K
  # k = k + 1
  JMS storeVarToMainMemory
  FIM r2, $STATUS_MEM_VARIABLE_N . 0
  SRC r2
  RD0
  SUB rr0
  CMC
  RD1
  SUB rr1
  CMC
  RD2
  SUB rr2
  CMC
  RD3
  SUB rr3
  # if k <= N
  JCN c, computeF_loop
  BBL 0

# INPUT:
#   MAIN_MEM_VARIABLE_M
#   MAIN_MEM_VARIABLE_F_COMPUTATION_K
#   MAIN_MEM_VARIABLE_CURRENT_PRIME
#   STATUS_MEM_VARIABLE_DIGIT_F_COMPUTATION_B
#   STATUS_MEM_VARIABLE_V
# OUTPUT:
#   STATUS_MEM_VARIABLE_DIGIT_F_COMPUTATION_B
#   STATUS_MEM_VARIABLE_V
# VARIABLES:
#   STATUS_MEM_VARIABLE_B_COMPUTATION_COEF
updateB:
  LDM $MAIN_MEM_VARIABLE_F_COMPUTATION_K
  JMS loadVarFromMainMemory
  LDM $STATUS_MEM_VARIABLE_B_COMPUTATION_COEF
  JMS storeVarToStatusCharMemory                      # bCoef = k
updateB_loop:
  LDM $MAIN_MEM_VARIABLE_DIV_DIVIDEND
  JMS storeVarToMainMemory                            # we know that rr0..rr3 contains bCoef
  JMS divMWxMW
  LDM $MAIN_MEM_VARIABLE_DIV_REMINDER
  JMS loadVarFromMainMemory
  LD rr0
  ADD rr1
  ADD rr2
  ADD rr3
  JCN c, updateB_return
  JCN nz, updateB_return                              # if bCoef % a !== 0
  LDM $MAIN_MEM_VARIABLE_DIV_QUOTIENT
  JMS loadVarFromMainMemory
  LDM $STATUS_MEM_VARIABLE_B_COMPUTATION_COEF
  JMS storeVarToStatusCharMemory                      # bCoef = bCoef / a
  FIM r3, $STATUS_MEM_VARIABLE_V . 0
  SRC r3
  RD3
  DAC
  WR3                                                 # v--
  JUN updateB_loop
updateB_return:
  FIM r7, $STATUS_MEM_VARIABLE_B_COMPUTATION_COEF . $STATUS_MEM_VARIABLE_DIGIT_F_COMPUTATION_B
  JMS mulMod                                          # b = (b * bCoef) % m
  BBL 0

# INPUT:
#   MAIN_MEM_VARIABLE_F_COMPUTATION_K
#   MAIN_MEM_VARIABLE_CURRENT_PRIME
#   STATUS_MEM_VARIABLE_DIGIT_F_COMPUTATION_A
#   STATUS_MEM_VARIABLE_V
# OUTPUT:
#   STATUS_MEM_VARIABLE_DIGIT_F_COMPUTATION_A
#   STATUS_MEM_VARIABLE_V
# VARIABLES:
#   STATUS_MEM_VARIABLE_A_COMPUTATION_COEF
updateA:
  LDM $MAIN_MEM_VARIABLE_F_COMPUTATION_K
  JMS loadVarFromMainMemory
  LDM $MAIN_MEM_VARIABLE_A_COMPUTATION_COEF
  JMS storeVarToMainMemory               # tmp = k
  FIM r0, $MAIN_MEM_VARIABLE_A_COMPUTATION_COEF . 3
  FIM r1, 0x13
  JMS shiftLeftVarFromMainMemory         # tmp = 2 * k
  FIM r0, $MAIN_MEM_VARIABLE_A_COMPUTATION_COEF . 0
  FIM r1, 0xC0
  STC
updateA_ACoef_decrement_loop:
  SRC r0
  RDM
  SUB rr3
  CMC
  WRM
  INC rr1
  ISZ rr2, updateA_ACoef_decrement_loop  # tmp = 2 * k - 1
  LDM $MAIN_MEM_VARIABLE_A_COMPUTATION_COEF
  JMS loadVarFromMainMemory
  LDM $STATUS_MEM_VARIABLE_A_COMPUTATION_COEF
  JMS storeVarToStatusCharMemory         # ACoef = tmp
updateA_loop:
  LDM $MAIN_MEM_VARIABLE_DIV_DIVIDEND
  JMS storeVarToMainMemory               # we know that rr0..rr3 contains ACoef
  JMS divMWxMW
  LDM $MAIN_MEM_VARIABLE_DIV_REMINDER
  JMS loadVarFromMainMemory
  LD rr0
  ADD rr1
  ADD rr2
  ADD rr3
  JCN c, updateA_return
  JCN nz, updateA_return                 # ACoef % a !== 0
  LDM $MAIN_MEM_VARIABLE_DIV_QUOTIENT
  JMS loadVarFromMainMemory
  LDM $STATUS_MEM_VARIABLE_A_COMPUTATION_COEF
  JMS storeVarToStatusCharMemory         # ACoef = ACoef / a
  FIM r3, $STATUS_MEM_VARIABLE_V . 0
  SRC r3
  RD3
  IAC
  WR3                                    # v++
  JUN updateA_loop
updateA_return:
  FIM r7, $STATUS_MEM_VARIABLE_A_COMPUTATION_COEF . $STATUS_MEM_VARIABLE_DIGIT_F_COMPUTATION_A
  JMS mulMod                             # A = (A * ACoef) % m
  BBL 0

# INPUT:
#   STATUS_MEM_VARIABLE_V
#   STATUS_MEM_VARIABLE_F_COMPUTATION_B
#   STATUS_MEM_VARIABLE_F_COMPUTATION_A
#   STATUS_MEM_VARIABLE_F
#   MAIN_MEM_VARIABLE_F_COMPUTATION_K
#   MAIN_MEM_VARIABLE_M
#   MAIN_MEM_VARIABLE_CURRENT_PRIME
# OUTPUT:
# VARIABLES:
#   STATUS_MEM_VARIABLE_F_COMPUTATION_K
#   STATUS_MEM_VARIABLE_F
#   STATUS_MEM_VARIABLE_F_COMPUTATION_FK
#   STATUS_MEM_VARIABLE_F_COMPUTATION_TMP
#   rr4'..rr7' - tmp
updateF:
  FIM r0, $STATUS_MEM_VARIABLE_V . 0
  SRC r0
  RD3
  JCN z, updateF_ret                 # if (v === 0)
  XCH rr0
  RD2
  SUB rr0
  CLC
  XCH rr0
  FIM r1, 0x00
  LDM $MAIN_MEM_VARIABLE_POWER_MOD_EXP
  JMS storeVarToMainMemory
  LDM $MAIN_MEM_VARIABLE_CURRENT_PRIME
  JMS loadVarFromMainMemory
  JMS powerMod                       # fk = (a ^ (vmax - v)) mod m
  FIM r7, $STATUS_MEM_VARIABLE_F_COMPUTATION_B . $STATUS_MEM_VARIABLE_DIGIT_F_COMPUTATION_FK
  JMS mulMod                         # fk = (fk * b) mod m
  LDM $MAIN_MEM_VARIABLE_F_COMPUTATION_K
  JMS loadVarFromMainMemory
  LDM $STATUS_MEM_VARIABLE_F_COMPUTATION_K
  JMS storeVarToStatusCharMemory
  FIM r7, $STATUS_MEM_VARIABLE_F_COMPUTATION_K . $STATUS_MEM_VARIABLE_DIGIT_F_COMPUTATION_FK
  JMS mulMod                         # fk = (fk * k) mod m
  SB1
  FIM r0, $STATUS_MEM_VARIABLE_F_COMPUTATION_FK . 0
  SRC r0
  RD0
  XCH rr4
  RD1
  XCH rr5
  RD2
  XCH rr6
  RD3
  XCH rr7                            # tmp = fk
  SB0
  JMS computeInvertedA
  SB1
  FIM r0, $STATUS_MEM_VARIABLE_F_COMPUTATION_TMP . 0
  SRC r0
  LD rr4
  WR0
  LD rr5
  WR1
  LD rr6
  WR2
  LD rr7
  WR3                                # fk = tmp
  SB0
  FIM r7, $STATUS_MEM_VARIABLE_F_COMPUTATION_TMP . $STATUS_MEM_VARIABLE_DIGIT_F_COMPUTATION_INV_A
  JMS mulMod                         # fk = (fk * A ^ (-1)) mod m
  FIM r0, $STATUS_MEM_VARIABLE_F_COMPUTATION_FK . 0
  SRC r0
  RD0
  XCH rr8
  RD1
  XCH rr9
  RD2
  XCH rr10
  RD3
  XCH rr11
  LDM $STATUS_MEM_VARIABLE_F
  JMS loadVarFromStatusCharMemory
  JMS addMod
  LDM $STATUS_MEM_VARIABLE_F
  JMS storeVarToStatusCharMemory     # f = (f + fk) mod m
updateF_ret:
  BBL 0

# INPUT:
#   STATUS_MEM_VARIABLE_VMAX
#   STATUS_MEM_VARIABLE_F_COMPUTATION_A
#   MAIN_MEM_VARIABLE_M
#   MAIN_MEM_VARIABLE_CURRENT_PRIME
# OUTPUT:
#   STATUS_MEM_VARIABLE_F_COMPUTATION_INV_A
computeInvertedA:
  FIM r0, $STATUS_MEM_VARIABLE_VMAX . 0
  SRC r0
  RD2
  DAC
  CLC
  XCH rr0
  FIM r1, 0x00
  LDM $MAIN_MEM_VARIABLE_POWER_MOD_EXP
  JMS storeVarToMainMemory
  LDM $MAIN_MEM_VARIABLE_CURRENT_PRIME
  JMS loadVarFromMainMemory
  JMS powerMod                       # tmp = a ^ (vmax - 1)
  FIM r2, $STATUS_MEM_VARIABLE_F_COMPUTATION_INV_A . 0
  SRC r2
  RD0
  XCH rr0
  INC rr0
  RDM
  SUB rr0
  CMC
  XCH rr0
  JCN c, computeInvertedA_carryOnFirstDigitForExponent
  RD0
  IAC                                # if first digit of a ^ (vmax - 1) is 0xF, then we are subtracting 0x10 and need to set carry
computeInvertedA_carryOnFirstDigitForExponent:
  INC rr5
  SRC r2
  RD1
  XCH rr1
  RDM
  SUB rr1
  CMC
  XCH rr1
  INC rr5
  SRC r2
  RD2
  XCH rr2
  RDM
  SUB rr2
  CMC
  XCH rr2
  INC rr5
  SRC r2
  RD3
  XCH rr3
  RDM
  SUB rr3
  CMC
  XCH rr3
  LDM $MAIN_MEM_VARIABLE_POWER_MOD_EXP
  JMS storeVarToMainMemory           # tmp = m - a ^ (vmax - 1) - 1
  LDM $STATUS_MEM_VARIABLE_F_COMPUTATION_A
  JMS loadVarFromStatusCharMemory
  JMS powerMod                       # A^(-1) = (A ^ tmp) mod m
  BBL 0

# INPUT:
#   MAIN_MEM_VARIABLE_CURRENT_PRIME
#   MAIN_MEM_VARIABLE_DOUBLED_N
# OUTPUT:
#   MAIN_MEM_VARIABLE_M
#   STATUS_MEM_VARIABLE_VMAX
# VARIABLES:
#   MAIN_MEM_VARIABLE_M_COMPUTATION_M
computeMaxVAndM:
  CLB
  XCH rr7
  LDM $MAIN_MEM_VARIABLE_CURRENT_PRIME
  JMS loadVarFromMainMemory
  LDM $MAIN_MEM_VARIABLE_M_COMPUTATION_M
  JMS storeVarToMainMemory                  # tmp = a
computeMaxVAndM_loop:
  INC rr7
  LDM $MAIN_MEM_VARIABLE_M_COMPUTATION_M
  JMS loadVarFromMainMemory
  LDM $MAIN_MEM_VARIABLE_M
  JMS storeVarToMainMemory                  # m = tmp
  LDM $MAIN_MEM_VARIABLE_CURRENT_PRIME
  XCH rr2
  LDM $MAIN_MEM_VARIABLE_M
  XCH rr4
  JMS mulMWxMW                              # tmp = tmp * a
  FIM r0, $MAIN_MEM_VARIABLE_DOUBLED_N . $MAIN_MEM_VARIABLE_DIGIT_M_COMPUTATION_M
  JMS compareVarsFromMainMemory
  JCN c, computeMaxVAndM_loop               # if 2 * N > tmp
  FIM r0, $STATUS_MEM_VARIABLE_VMAX . 0
  SRC r0
  LD rr7
  WR2
  BBL 0

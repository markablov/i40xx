%include "submodules/memory.i4040"
%include "submodules/computePiDigits.i4040"
%include "submodules/mulTableGeneration.i4040"

# MEMORY LAYOUT:
#  Bank #0:
#    Registers #0..#F:
#      Main characters: chunks with digits
#      Status characters: lookup table for modular multiplication (multipliers of m)
#  Bank #1:
#    Registers #0..#F:
#      Main characters: chunks with digits
#      Status characters #0, #1: lookup table for 4-bit multiplications by factor 0x4 (regNo * 0x3)
#      Status characters #2, #3: lookup table for 4-bit multiplications by factor 0x3 (regNo * 0x3)
#  Bank #2:
#    Registers #0..#F:
#      Main characters: chunks with digits
#      Status characters #0, #1: lookup table for 4-bit multiplications by factor 0x5 (regNo * 0x5)
#      Status characters #2, #3: lookup table for 4-bit multiplications by factor 0x6 (regNo * 0x6)
#  Bank #3:
#    Registers #0..#F:
#      Main characters: chunks with digits
#      Status characters #0, #1: lookup table for 4-bit multiplications by factor 0x7 (regNo * 0x7)
#      Status characters #2, #3: lookup table for 4-bit multiplications by factor 0x9 (regNo * 0x9)
#  Bank #4:
#    Registers #0..#F:
#      Main characters: chunks with digits
#      Status characters #0, #1: lookup table for 4-bit multiplications by factor 0xA (regNo * 0xA)
#      Status characters #2, #3: lookup table for 4-bit multiplications by factor 0xB (regNo * 0xB)
#  Bank #5:
#    Registers #0..#F:
#      Main characters: chunks with digits
#      Status characters #0, #1: lookup table for 4-bit multiplications by factor 0xC (regNo * 0xC)
#      Status characters #2, #3: lookup table for 4-bit multiplications by factor 0xD (regNo * 0xD)
#  Bank #6:
#    Registers #0..#F:
#      Main characters: chunks with digits
#      Status characters #0, #1: lookup table for 4-bit multiplications by factor 0xE (regNo * 0xE)
#      Status characters #2, #3: lookup table for 4-bit multiplications by factor 0xF (regNo * 0xF)
#  Bank #7:
#    Registers #0..#1:
#      Main characters: chunks with digits
#      Status characters: variables
#    Registers #2..#3:
#      Main characters: exponentiation table
#      Status characters: variables
#    Registers #4..#7:
#      Main characters: current primeness map
#      Status characters: variables
#    Registers #8..#B:
#      Main characters: variables
#      Status characters: variables
#    Registers #C..#F:
#      Main characters: initial segment of prime numbers
#      Status characters: variables

main:
  JMS generateMulTables

  LDM $BANK_WITH_VARIABLES
  DCL

  LDM 3
  WMP                                                      # first Pi digit

  FIM r0, 0x00
  FIM r1, 0x00
  LDM $STATUS_MEM_VARIABLE_STARTING_PI_DIGITS_POSITION
  JMS storeVarToStatusCharMemory                           # startingPiDigitsPosition = 0

  FIM r0, 0x20
  FIM r1, 0x40
  LDM $STATUS_MEM_VARIABLE_DIGITS_COUNT
  JMS storeVarToStatusCharMemory                           # digitsCount = 1026 = 0x402

  JUN computePiDigits

main_stage2:
  JMS clearMemory
  JMS generateMulTables
  LDM $BANK_WITH_VARIABLES
  DCL

  FIM r0, 0x20
  FIM r1, 0x40
  LDM $STATUS_MEM_VARIABLE_STARTING_PI_DIGITS_POSITION
  JMS storeVarToStatusCharMemory                           # startingPiDigitsPosition = 1026 = 0x402

  FIM r0, 0x20
  FIM r1, 0x40
  LDM $STATUS_MEM_VARIABLE_DIGITS_COUNT
  JMS storeVarToStatusCharMemory                           # digitsCount = 1026 = 0x402

  FIM r0, $MAIN_MEM_VARIABLE_COMPUTATION_STAGE . F
  SRC r0
  LDM 0x1
  WRM

  JUN computePiDigits

__rom_bank(0)
__location(00:0x02)
main_stage_end:
  LDM $BANK_WITH_VARIABLES
  DCL
  FIM r0, $MAIN_MEM_VARIABLE_COMPUTATION_STAGE . F
  SRC r0
  RDM
  JCN nz, main_end
  JUN main_stage2

__rom_bank(0)
__location(00:0x0C)
main_end:
  LDM 0x0F
  WMP                                                      # signal that job is done
  HLT

__rom_bank(0)
__location(00:0x00)
entrypoint:
  JUN main
